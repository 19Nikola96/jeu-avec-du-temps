[{"/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/index.tsx":"1","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/reportWebVitals.ts":"2","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/App.tsx":"3","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/CreateJoinRoom.tsx":"4","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Room.tsx":"5","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Messenger.tsx":"6","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/CreateTeams.tsx":"7","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/StartGame.tsx":"8","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Game1.tsx":"9","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Chrono.tsx":"10","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/NextTurn.tsx":"11","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/NextRound.tsx":"12","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Board.tsx":"13","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/WaitingAnim.tsx":"14","/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/index.tsx":"15","/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/reportWebVitals.ts":"16","/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/App.tsx":"17","/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/CreateJoinRoom.tsx":"18","/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/Room.tsx":"19","/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/CreateTeams.tsx":"20","/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/Messenger.tsx":"21","/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/StartGame.tsx":"22","/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/Game1.tsx":"23","/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/WaitingAnim.tsx":"24","/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/NextRound.tsx":"25","/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/NextTurn.tsx":"26","/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/Board.tsx":"27"},{"size":500,"mtime":1617530835613,"results":"28","hashOfConfig":"29"},{"size":425,"mtime":1617530835614,"results":"30","hashOfConfig":"29"},{"size":10489,"mtime":1630443836603,"results":"31","hashOfConfig":"29"},{"size":5283,"mtime":1630592488242,"results":"32","hashOfConfig":"29"},{"size":14920,"mtime":1630774695920,"results":"33","hashOfConfig":"29"},{"size":3288,"mtime":1619184459631,"results":"34","hashOfConfig":"29"},{"size":9489,"mtime":1624194532714,"results":"35","hashOfConfig":"29"},{"size":3573,"mtime":1630587246824,"results":"36","hashOfConfig":"29"},{"size":19858,"mtime":1631216777859,"results":"37","hashOfConfig":"29"},{"size":983,"mtime":1624199564656,"results":"38","hashOfConfig":"29"},{"size":2985,"mtime":1630587071081,"results":"39","hashOfConfig":"29"},{"size":2960,"mtime":1630616092539,"results":"40","hashOfConfig":"29"},{"size":8067,"mtime":1631216749476,"results":"41","hashOfConfig":"29"},{"size":227,"mtime":1630578294555,"results":"42","hashOfConfig":"29"},{"size":500,"mtime":1617530835613,"results":"43","hashOfConfig":"44"},{"size":425,"mtime":1617530835614,"results":"45","hashOfConfig":"44"},{"size":10489,"mtime":1630443836603,"results":"46","hashOfConfig":"44"},{"size":5283,"mtime":1630592488242,"results":"47","hashOfConfig":"44"},{"size":14920,"mtime":1630774695920,"results":"48","hashOfConfig":"44"},{"size":9489,"mtime":1624194532714,"results":"49","hashOfConfig":"44"},{"size":3288,"mtime":1619184459631,"results":"50","hashOfConfig":"44"},{"size":3573,"mtime":1630587246824,"results":"51","hashOfConfig":"44"},{"size":19858,"mtime":1631216777859,"results":"52","hashOfConfig":"44"},{"size":227,"mtime":1630578294555,"results":"53","hashOfConfig":"44"},{"size":2960,"mtime":1630616092539,"results":"54","hashOfConfig":"44"},{"size":2985,"mtime":1630587071081,"results":"55","hashOfConfig":"44"},{"size":8067,"mtime":1631216749476,"results":"56","hashOfConfig":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"1cxde51",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"59"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"59"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"59"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"59"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"59"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"59"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"59"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"q727mw",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/index.tsx",[],["123","124"],"/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/reportWebVitals.ts",[],"/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/App.tsx",["125","126"],"import React, { useEffect, useState } from 'react';\nimport CreateJoinRoom from './Components/CreateJoinRoom';\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\nimport { Carousel } from 'react-responsive-carousel';\nimport { Beforeunload } from 'react-beforeunload';\n\nimport './App.css';\nimport Board from './Components/Board';\n\nconst App = () => {\n\n  const [displayCreateJoinRoom, setDisplayCreateJoinRoom] = useState(false)\n\n  const [newPseudo, setNewPseudo] = useState('')\n  const [ancientPseudo, setAnciantPseudo] = useState<string | null>()\n\n  useEffect(() => {\n    setAnciantPseudo(localStorage.getItem('myPseudo'))\n  }, [])\n\n  const handleOnSubmit = (e: React.ChangeEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    if (newPseudo !== '') {\n      localStorage.setItem('myPseudo', newPseudo)\n    }\n\n    setDisplayCreateJoinRoom(true)\n  }\n\n  // window.onbeforeunload = (event: any) => {\n  //   const e = event || window.event;\n  //   // Cancel the event\n  //   e.preventDefault();\n  //   if (e) {\n  //     e.returnValue = ''; // Legacy method for cross browser support\n  //   }\n  //   return ''; // Legacy method for cross browser support\n  // };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"mt-3\">Jeu avec du temps <i className=\"fas fa-stopwatch\"></i></h1>\n      <main>        \n        <div className=\"\">\n          { displayCreateJoinRoom \n              ? <CreateJoinRoom />\n\n              : <>\n                  <form onSubmit={handleOnSubmit} className=\"mt-3\">\n                    <input className=\"mon-input\" placeholder={ancientPseudo === null ? 'PseudoStylayDu91Rpz' : ancientPseudo} type=\"text\" onChange={(e) => setNewPseudo(e.target.value)}/>\n                    <br/>\n                    <button className=\"mon-bouton mt-3\" type=\"submit\">GO <i className=\"fas fa-arrow-alt-circle-right\"></i></button>\n                  </form>\n                  <div className=\"row justify-content-center mt-5 mx-1\">\n                    <div className=\"gradient-border col-md-12\" id=\"box\">\n                    <Carousel \n                      autoPlay={true} \n                      infiniteLoop={true} \n                      dynamicHeight={true}\n                      showThumbs={false}\n                    >\n                      <div className=\"item\" >\n                          <h2 className=\"mb-3\">Phase 1</h2>\n                          <div className=\"mx-auto round-logo round1\">\n                            <svg fill=\"#a0431e\" id=\"Capa_1\" enableBackground=\"new 0 0 512 512\" viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><g><path d=\"m481.251 280.748c-5.859-5.857-15.357-5.854-21.213.006-5.856 5.859-5.854 15.357.006 21.213 14.158 14.15 21.956 32.981 21.956 53.023 0 20.044-7.807 38.881-21.982 53.04-5.861 5.854-5.866 15.352-.012 21.213 2.93 2.933 6.771 4.399 10.612 4.399 3.836 0 7.673-1.463 10.601-4.388 19.849-19.825 30.781-46.2 30.781-74.264 0-28.058-10.92-54.425-30.749-74.242z\"/><path d=\"m417.606 323.171c-5.858 5.857-5.858 15.355 0 21.213 2.833 2.833 4.394 6.6 4.394 10.606s-1.561 7.773-4.394 10.606c-5.858 5.857-5.858 15.355 0 21.213 2.929 2.929 6.768 4.394 10.606 4.394s7.678-1.465 10.606-4.394c17.546-17.545 17.546-46.094 0-63.639-5.856-5.857-15.354-5.857-21.212.001z\"/><path d=\"m370 210.458v-15.458c0-102.01-82.99-185-185-185s-185 82.99-185 185v23.977c0 56.079 26.024 109.157 70 143.534v124.489c0 8.284 6.716 15 15 15h180c8.284 0 15-6.716 15-15v-47h45c24.813 0 45-20.187 45-45v-20c0-5.172-2.664-9.979-7.05-12.72l-19.648-12.28 19.648-12.28c4.386-2.741 7.05-7.548 7.05-12.72v-28.288l28.638-7.16c4.732-1.183 8.594-4.593 10.354-9.143 1.759-4.55 1.195-9.671-1.511-13.729zm-18.638 59.99c-6.677 1.669-11.362 7.669-11.362 14.552v31.687l-32.95 20.594c-4.386 2.741-7.05 7.548-7.05 12.72s2.664 9.979 7.05 12.72l32.95 20.592v11.687c0 8.271-6.729 15-15 15h-60c-8.284 0-15 6.716-15 15v47h-150v-117c0-4.844-2.34-9.391-6.281-12.206-39.899-28.499-63.719-74.786-63.719-123.817v-23.977c0-85.468 69.532-155 155-155s155 69.532 155 155v20c0 2.961.877 5.856 2.52 8.32l28.192 42.29z\"/><path d=\"m175.403 279.73c-6.864-4.641-16.188-2.84-20.829 4.022-2.866 4.238-6.323 6.645-10.275 7.151-4.974.634-10.837-1.757-16.51-6.742-16.69-14.667-24.775-44.84-17.655-65.888 2.421-7.154 6.302-12.16 10.928-14.095 3.677-1.535 7.874-1.181 12.474 1.057 7.452 3.62 16.427.519 20.05-6.931 3.622-7.45.52-16.427-6.931-20.05-12.331-5.996-25.53-6.619-37.164-1.754-12.689 5.305-22.553 16.726-27.774 32.159-10.959 32.397.58 75.46 26.269 98.036 10.628 9.339 22.773 14.308 34.721 14.308 1.811 0 3.616-.114 5.411-.345 12.509-1.604 23.628-8.743 31.31-20.101 4.638-6.86 2.838-16.185-4.025-20.827z\"/></g></svg>\n                          </div>\n                          <p>Chacun sont tour il va falloir faire deviner le plus de mots à vos coéquipiers !</p>\n                          <p>Vous pouvez, pour cela, utiliser autant de mots que vous le souhaitez</p>\n                      </div>\n                      <div className=\"item\">\n                        <h2 className=\"mb-2\">Phase 2</h2>\n                        <div className=\"mx-auto round-logo round2\">\n                          <svg fill=\"#a0431e\" id=\"Capa_1\" enableBackground=\"new 0 0 512 512\" viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><g><path d=\"m417.606 323.171c-5.858 5.857-5.858 15.355 0 21.213 2.833 2.833 4.394 6.6 4.394 10.606s-1.561 7.773-4.394 10.606c-5.858 5.857-5.858 15.355 0 21.213 2.929 2.929 6.768 4.394 10.606 4.394s7.678-1.465 10.606-4.394c17.546-17.545 17.546-46.094 0-63.639-5.856-5.857-15.354-5.857-21.212.001z\"/><path d=\"m370 210.458v-15.458c0-102.01-82.99-185-185-185s-185 82.99-185 185v23.977c0 56.079 26.024 109.157 70 143.534v124.489c0 8.284 6.716 15 15 15h180c8.284 0 15-6.716 15-15v-47h45c24.813 0 45-20.187 45-45v-20c0-5.172-2.664-9.979-7.05-12.72l-19.648-12.28 19.648-12.28c4.386-2.741 7.05-7.548 7.05-12.72v-28.288l28.638-7.16c4.732-1.183 8.594-4.593 10.354-9.143 1.759-4.55 1.195-9.671-1.511-13.729zm-18.638 59.99c-6.677 1.669-11.362 7.669-11.362 14.552v31.687l-32.95 20.594c-4.386 2.741-7.05 7.548-7.05 12.72s2.664 9.979 7.05 12.72l32.95 20.592v11.687c0 8.271-6.729 15-15 15h-60c-8.284 0-15 6.716-15 15v47h-150v-117c0-4.844-2.34-9.391-6.281-12.206-39.899-28.499-63.719-74.786-63.719-123.817v-23.977c0-85.468 69.532-155 155-155s155 69.532 155 155v20c0 2.961.877 5.856 2.52 8.32l28.192 42.29z\"/><path d=\"m175.403 279.73c-6.864-4.641-16.188-2.84-20.829 4.022-2.866 4.238-6.323 6.645-10.275 7.151-4.974.634-10.837-1.757-16.51-6.742-16.69-14.667-24.775-44.84-17.655-65.888 2.421-7.154 6.302-12.16 10.928-14.095 3.677-1.535 7.874-1.181 12.474 1.057 7.452 3.62 16.427.519 20.05-6.931 3.622-7.45.52-16.427-6.931-20.05-12.331-5.996-25.53-6.619-37.164-1.754-12.689 5.305-22.553 16.726-27.774 32.159-10.959 32.397.58 75.46 26.269 98.036 10.628 9.339 22.773 14.308 34.721 14.308 1.811 0 3.616-.114 5.411-.345 12.509-1.604 23.628-8.743 31.31-20.101 4.638-6.86 2.838-16.185-4.025-20.827z\"/></g></svg>\n                        </div>\n                        <p>Comme le tour précédent il va falloir faire deviner le plus de mots à vos coéquipiers !</p>\n                        <p>En revanche, vous ne pourrez utiliser qu'un seul mot</p>\n                      </div>\n                      <div className=\"item\">\n                        <h2 className=\"mb-2\">Phase 3</h2>\n                        <div className=\"mx-auto round-logo round3\">\n                          <svg fill=\"#a0431e\" viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m497.230469 398.746094h-140.308594c-31.21875 0-56.613281 25.394531-56.613281 56.613281 0 14.929687-12.148438 27.078125-27.078125 27.078125h-216.613281c-14.933594 0-27.078126-12.148438-27.078126-27.078125v-19.714844c0-14.921875 12.140626-27.066406 27.0625-27.074219l39.035157-.019531c.011719 0 .027343-.003906.039062-.003906.445313 0 .890625-.027344 1.339844-.066406.183594-.015625.363281-.046875.546875-.070313.191406-.027344.386719-.042968.578125-.074218l104.238281-17.980469c.054688-.011719.105469-.023438.15625-.035157.164063-.03125.324219-.066406.484375-.101562.261719-.058594.519531-.117188.773438-.191406.179687-.046875.359375-.101563.539062-.15625.238281-.078125.476563-.160156.714844-.25.171875-.066406.347656-.125.519531-.195313.367188-.15625.726563-.320312 1.082032-.503906.140624-.074219.28125-.160156.421874-.238281.25-.140625.496094-.28125.738282-.4375.148437-.09375.296875-.195313.445312-.296875.234375-.164063.46875-.335938.695313-.515625.121093-.09375.246093-.1875.367187-.289063.34375-.285156.679688-.582031.996094-.902343l263.265625-263.261719s-.003906.003906 0 0c21.113281-21.113281 21.113281-55.46875 0-76.585938l-30.5625-30.558593c-21.113281-21.117188-55.472656-21.113282-76.585937 0l-263.261719 263.261718c-.320313.316406-.617188.65625-.90625 1-.097657.117188-.191407.238282-.285157.359375-.179687.230469-.351562.464844-.515624.703125-.101563.144532-.203126.292969-.296876.441406-.152343.238282-.292968.480469-.429687.726563-.089844.160156-.183594.320313-.269531.480469-.171875.339844-.328125.679687-.476563 1.03125-.074219.175781-.136719.359375-.207031.539062-.082031.226563-.164062.457032-.238281.6875-.058594.1875-.113281.375-.164063.5625-.066406.242188-.125.488282-.179687.738282-.039063.171874-.078125.34375-.109375.515624-.011719.050782-.023438.097657-.03125.144532l-15.871094 91.992187-26.601562.011719c-31.203126.015625-56.585938 25.414062-56.585938 56.613281v19.714844c0 31.21875 25.398438 56.617187 56.617188 56.617187h216.613281c31.21875 0 56.617187-25.398437 56.617187-56.617187 0-14.929687 12.144532-27.078125 27.074219-27.078125h140.308594c8.15625 0 14.769531-6.609375 14.769531-14.765625 0-8.160156-6.613281-14.769531-14.769531-14.769531zm-373.910157-78.609375 45.953126 45.953125-55.53125 9.578125zm220.300782-239.722657 22.242187 22.242188-209.125 209.125-22.242187-22.242188zm-143.753906 274.496094-22.242188-22.242187 209.128906-209.125 22.242188 22.242187zm187.449218-318.191406c9.597656-9.59375 25.210938-9.59375 34.8125 0l30.558594 30.5625c9.597656 9.597656 9.597656 25.214844 0 34.8125l-22.808594 22.808594c0-.003906.003906 0 .003906 0s0 0-.003906 0l-65.371094-65.375zm0 0\"/></svg>\n                        </div>\n                        <p>Pour le dernier tour il va falloir faire deviner en dessinant</p>\n                        <p>Interdiction de parler !</p>\n                      </div>\n                  </Carousel>\n                    </div>\n                  </div>\n                </>\n            }\n          </div>\n        </main>\n      </div>\n  );\n}\n\nexport default App","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/CreateJoinRoom.tsx",[],"/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Room.tsx",["127","128","129","130"],"import React, { useEffect, useState } from 'react'\nimport { AdminObj, DataRoomObjWithKey, RoomObj, RulesObj } from '../Types'\nimport CreateTeams from './CreateTeams';\nimport Messenger from './Messenger'\nimport StartGameTransition from './StartGame';\nimport './Style/room.css';\n\ntype Props = {\n    roomData: RoomObj\n    error: string\n    socketRef: React.MutableRefObject<any>\n}\n\nconst Room: React.FC<Props> = ({ roomData, error, socketRef }) => {\n\n    const [displayAddWord, setDisplayAddWord] = useState<boolean>(false)\n    const [displaySetWordsSize, setDisplaySetWordsSize] = useState<boolean>(false)\n    const [displayCreateTeam, setDisplayCreateTeam] = useState<boolean>(false)\n\n    const [displayStartGame, setDisplayStartGame] = useState<boolean>(false)\n    // DISPLAY //\n\n\n    const [word, setWord] = useState<string>('')\n    const [words, setWords] = useState<string []>([])\n    const [wordsLength, setWordsLength] = useState<number>(0)\n    const [allWords, setAllWords] = useState<string []>([])\n    // WORDS //\n\n    const [nbrWords, setNbrWords] = useState<number>(5)\n    const [time, setTime] = useState<number>(45)\n    const [drawTime, setDrawTime] = useState<number>(90)\n    const [rules, setRules] = useState<RulesObj>()\n    const [round, setRound] = useState<number>()\n    // RULES //\n\n    const [users, setUsers] = useState<AdminObj[]>()\n    // USERS //\n\n    const inputRef = React.useRef() as React.MutableRefObject<HTMLInputElement>;\n\n    useEffect(() => {\n        socketRef.current.emit(\"ask share rooms\", true)\n        socketRef.current.emit(\"ask rules\", roomData.id)\n\n        socketRef.current.on(\"start game prvw\", (start: boolean) => {\n            setDisplayStartGame(start)\n        })\n\n        socketRef.current.on(\"share rooms\", (data: DataRoomObjWithKey) => {                        \n            if (roomData.id !== '') {\n                Object.keys(data).map((id) => {                    \n                    if (roomData.id === id) {\n                        setUsers(data[id].users)            \n                    }\n                    return true\n                })\n            }\n        })\n\n        socketRef.current.on(\"words\", (words: string []) => {\n            setAllWords(words)\n            \n            setWordsLength(words.length);\n        })\n\n        socketRef.current.on(\"rules\", (rulesData: RulesObj) => {\n            setRules(rulesData);\n            // Display \"Rules have been updated\"\n        })\n\n    }, [roomData])\n\n\n    const copyLink = (e: any) => {\n        inputRef.current.select();\n\n        document.execCommand('copy');\n\n        e.target.focus();\n    }\n    \n    const handleAddWord = (e: React.ChangeEvent<HTMLFormElement>) => {\n        e.preventDefault()\n\n        if (word.length !== 0) {\n            if (rules?.numberOfWords === null && words.length > 2 ) {\n                words.splice(words.length ,1)\n                setWord('')\n                window.alert('Tu ne peux plus ajouter de mots pour le moment ! Il fau attendre que l\\' admin de la room mette en place les régles')                \n            } else {\n                console.log(words.length, '>', rules?.numberOfWords);\n                \n                if (rules && rules?.numberOfWords !== null && words.length > rules?.numberOfWords - 1) {\n                    console.log('test');\n                    \n                    setWord('')\n                    window.alert('Tu ne peux plus ajouter de mots')\n                } else {                    \n                    setWords([...words, word])\n    \n                    const wordData = {\n                        word: word,\n                        idRoom: roomData.id\n                    }\n    \n                    socketRef.current.emit(\"add word\", wordData)\n                    setWord('')\n                }\n            }\n        }\n    }\n\n    const handleRulesSet = (e: React.ChangeEvent<HTMLFormElement>) => {\n        e.preventDefault()        \n\n        const rulesData = {\n            numberOfWords: nbrWords,\n            time: time,\n            timeDraw: drawTime,\n            round: 2,\n            idRoom: roomData.id,\n        }\n\n        socketRef.current.emit(\"set rules\", rulesData)\n\n        setDisplaySetWordsSize(!displaySetWordsSize)\n    }\n\n    const startGamePreview = () => {\n        socketRef.current.emit(\"start game preview\", roomData.id)\n\n        // socketRef.current.emit(\"set playing team and player\", roomData.id)\n\n        setDisplayStartGame(true)\n    }\n\n    return (\n        <>\n            { displayStartGame\n                ? <StartGameTransition socketRef={socketRef} idRoom={roomData.id}/>\n\n                :  <div className=\"room container grow\">\n                    {error}\n                    <div className=\"d-flex flex-column justify-content-between align-items-between\">\n                        <div>\n                            <h2 className=\"mb-3\">{roomData === undefined ? '' : roomData.name}</h2>\n                            <div className=\"row\">\n                                <label>ID Room</label>\n                                <div>\n                                    <input className=\"mx-auto copy-input\" ref={inputRef} type=\"text\" defaultValue={roomData === undefined ? '' : roomData.id}/>\n                                    <button className=\"mon-bouton mx-2 mb-3 rounded\" onClick={(e) => copyLink(e)} style={{ filter: 'hue-rotate(18deg)'}}><i className=\"fas fa-clone\"></i></button>\n                                </div>                                \n                                <div className=\"row justify-content-between\">\n                                    <div className=\"w-auto\">\n                                        <button className=\"room-bouton\" onClick={() => setDisplaySetWordsSize(!displaySetWordsSize)} type=\"button\">\n                                            Régles <i className=\"fas fa-caret-down\"></i>\n                                        </button>\n                                        <div className=\"position-dropdown\">\n                                            { roomData.admin.id === socketRef.current.id\n                                                ? <> \n                                                    { displaySetWordsSize \n                                                        ? <form onSubmit={handleRulesSet} className=\"dropdowned-item d-flex flex-column dropdown-unfold\">\n                                                            <label className=\"text-start\">Nombre de mots/joueurs</label>\n                                                            <input value={nbrWords} \n                                                                className=\"w-25\"\n                                                                onChange={(e) => setNbrWords(parseFloat(e.target.value))} \n                                                                type=\"number\"\n                                                                min=\"3\"\n                                                                max=\"1000\"       \n                                                            />\n                                                            <label className=\"text-start mt-2\">Temps Round 1 et 2</label>\n                                                            <input value={time} \n                                                                className=\"w-25\"\n                                                                onChange={(e) => setTime(parseFloat(e.target.value))} \n                                                                type=\"number\"\n                                                                min=\"5\"\n                                                                max=\"1000\"       \n                                                            />\n                                                            <label className=\"text-start mt-2\">Temps Round 3</label>\n                                                            <input value={drawTime} \n                                                                className=\"w-25\"\n                                                                onChange={(e) => setDrawTime(parseFloat(e.target.value))} \n                                                                type=\"number\"\n                                                                min=\"30\"\n                                                                max=\"1000\"       \n                                                            />   \n                                                            <div className=\"text-end\">\n                                                                <button className=\"orange-button\" type=\"submit\"><i className=\"fas fa-check\"></i></button>\n                                                            </div>\n                                                          </form>\n                                                        \n                                                        : ''\n                                                    }\n                                                </>\n                                            \n                                                : <>\n                                                    { displaySetWordsSize \n                                                        ? <div className=\"dropdowned-item d-flex flex-column dropdown-unfold\">\n                                                            <span>Nombre de mots/joueurs</span>\n                                                            <p>{ rules?.numberOfWords === null ? \"5\" : rules?.numberOfWords }</p>\n                                                            <span>Temps round 1 et 2</span>\n                                                            <p>{ rules?.numberOfWords === null ? \"45\" : rules?.time }</p>\n                                                            <span>Temps round 3</span>\n                                                            <p>{ rules?.numberOfWords === null ? \"90\" : rules?.timeDraw }</p>                                               \n                                                        </div>\n    \n                                                        : ''\n                                                    }\n                                                </>\n                                            }                                    \n                                        </div>\n                                    </div>\n                                    <div className=\"w-auto\">\n                                        <button className=\"room-bouton\" onClick={() => setDisplayAddWord(!displayAddWord)} type=\"button\">\n                                            Ajouter un mot <i className=\"fas fa-caret-down\"></i>\n                                        </button>\n                                        <div className=\"position-dropdown\">\n                                            { displayAddWord \n                                                ? <form onSubmit={handleAddWord} className=\"dropdowned-item row dropdown-unfold justify-content-between\">\n                                                    <input value={word} onChange={(e) => setWord(e.target.value)} className=\"w-75 mr-3\" type=\"text\"/>\n                                                    <button className=\"orange-button\" type=\"submit\"><i className=\"fas fa-check\"></i></button>\n                                                </form>\n        \n                                                : ''\n                                            }\n                                        </div>\n                                    </div>\n                                    { roomData.admin.id === socketRef.current.id \n                                        ? <div>\n                                            <button className=\"room-bouton me-1\" onClick={() => setDisplayCreateTeam(!displayCreateTeam)}>{displayCreateTeam ? 'Voir Messages' : 'Créer Équipes'}</button>\n                                            <button className=\"room-bouton ms-1\" onClick={() => startGamePreview()}>Test Round</button>\n                                        </div>\n\n                                        : ''\n                                    }\n                                    { displayCreateTeam\n                                    ? <div className=\"team-position\">\n                                        <CreateTeams idRoom={roomData.id} socketRef={socketRef} />\n                                    </div> \n                                \n                                    : ''                    \n                                }  \n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"container\">\n                            <div className=\"row mt-3 justify-content-between\">\n                                <div className=\"col-md-4 users\">\n                                    <div className=\"row justify-content-between\">\n                                        <p className=\"word-count-all\">{wordsLength}/{rules && users && users?.length > 3 ? rules?.numberOfWords * users?.length : \"20\"}</p>\n                                        <h3 className=\"mt-2\">Joueurs</h3>\n                                        <p className=\"word-count-perso\">{words.length}/{rules && rules.numberOfWords !== null ? rules.numberOfWords : \"3\"}</p>\n                                    </div>\n                                    <ul>\n                                        { users !== undefined\n                                            ? users.map((user, index) => {\n                                                if (roomData.admin.id === user.id) {\n                                                    return <li key={index} className=\"grow\">\n                                                                <p>{user.pseudo} <i className=\"fas fa-star\"></i></p>\n                                                        </li>\n                                                } else {                                        \n                                                    return <li key={index} className=\"grow\">\n                                                                <p>{user.pseudo}</p>\n                                                        </li>\n                                                }\n                                            })\n        \n                                            : ''\n                                        }\n                                    </ul>\n                                </div>\n                                <Messenger idRoom={roomData.id} socketRef={socketRef} />                              \n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            }\n        </>\n    )\n}\n\nexport default Room\n","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Messenger.tsx",["131"],"import React, { useEffect, useState } from 'react'\nimport { BodyMessageObject } from '../Types'\nimport ReactScrollableFeed from 'react-scrollable-feed'\nimport './Style/messenger.css';\n\ntype Props = {\n    idRoom: string | number\n    socketRef: React.MutableRefObject<any>\n}\n\nconst Messenger: React.FC<Props> = ({ idRoom, socketRef }) => {\n\n    const [myPseudo, setMyPseudo] = useState<string | null>('')\n    const [myId, setMyId] = useState<string | number>()\n    const [message, setMessage] = useState<string>('')\n    const [messages, setMessages] = useState<BodyMessageObject []>([])\n\n    useEffect(() => {\n        setMyId(socketRef.current.id)\n\n        socketRef.current.on(\"messages\", (messageBody: BodyMessageObject[]) => {                             \n            setMessages(messageBody)\n        })\n\n        setMyPseudo(localStorage.getItem('myPseudo'))\n    }, [messages])\n\n    const sendMessage = (e: React.ChangeEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        if (message !== '') {\n            const messageObject = {\n                body: { \n                    message,\n                    myPseudo,\n                    id: myId\n                }, \n                idRoom\n            }\n            setMessage('')            \n            socketRef.current.emit(\"send message\", messageObject)\n        }\n    }\n\n    return (\n        <div className=\"col-md-7 messenger slide\">\n            <h3 className=\"mt-2\">Messages</h3>\n            <ul id=\"messages\">\n            <ReactScrollableFeed>\n                { messages !== undefined\n                    ? <>\n                        {messages.map((messageBody, index) => {                                                   \n                            if (messageBody.id === myId) {\n                            return <div key={index} className=\"new-message row justify-content-end\">\n                                    <li className=\"your-message text-end my-2 mr-4 px-3\">\n                                        <p className=\"mt-2\">{messageBody.message}</p>                            \n                                    </li>\n                                </div> \n                            } else {\n                            return <div key={index} className=\"new-message row justify-content-start\">\n                                    <li className=\"others-message text-start my-2 mr-4 px-3\">\n                                        <p className=\"mt-2\"> <span>{messageBody.myPseudo}</span> - {messageBody.message}</p>                            \n                                    </li>\n                                </div> \n                            }\n                            \n                })}\n                    </>\n\n                    : ''\n                }\n            </ReactScrollableFeed>\n            \n            </ul>\n            <form onSubmit={sendMessage} className=\"message-form row justify-content-between\">\n                <input className=\"send-input\" placeholder=\"Écrit un truc...\" value={message} onChange={(e) => setMessage(e.target.value)} />\n                <button className=\"mon-bouton rounded-circle\" type=\"submit\" style={{ filter: 'hue-rotate(18deg)'}}><i className=\"fas fa-paper-plane\"></i></button>\n            </form>\n        </div>\n    )\n}\n\nexport default Messenger\n","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/CreateTeams.tsx",["132","133","134","135","136"],"import React, { useEffect, useState } from 'react'\nimport { AdminObj, TeamObj } from '../Types';\nimport { v4 as uuidv4 } from 'uuid';\nimport './Style/createTeams.css';\n\ntype Props = {\n    idRoom: string | number\n    socketRef: React.MutableRefObject<any>\n}\n\ntype TeamPlayers = {\n    id: string | number | undefined\n    pseudo: string | null | undefined\n    playing: boolean\n}\n\nconst CreateTeams: React.FC<Props> = ({ idRoom, socketRef }) => {\n\n    const [displayAddPlayer, setDisplayAddPlayer] = useState<boolean>(false)\n    const [displayAddPlayerByTeamNumber, setDisplayAddPlayerByTeamNumber] = useState<number>(0)\n    // DISPLAY //\n    const [myId, setMyId] = useState<string | number>()\n\n    const [teamName, setTeamName] = useState<string>('')\n    const [teams, setTeams] = useState<TeamObj[]>()\n    const [teamPlayers, setTeamPlayers] = useState<TeamPlayers []>([])\n    // TEAMS //\n\n    const [users, setUsers] = useState<AdminObj[]>()\n    // USERS //\n\n    useEffect(() => {\n        setMyId(socketRef.current.id)\n\n        socketRef.current.emit(\"ask users\", idRoom)\n        socketRef.current.emit(\"ask teams\", idRoom)\n        socketRef.current.emit(\"ask messages\", idRoom)\n        \n        socketRef.current.on(\"users\", (usersData: AdminObj []) => {                      \n            setUsers(usersData);\n        })\n\n        socketRef.current.on(\"teams\", (teamsData: TeamObj[]) => {                                                                 \n            setTeams(teamsData)\n        })\n\n    }, [displayAddPlayer])\n\n    const handleCreateTeam = (e: React.ChangeEvent<HTMLFormElement>) => {\n        e.preventDefault()\n\n        if (teamName.length !== 0) {\n            let teamId = uuidv4()\n\n            let teamObj = {}\n\n            if (teams?.length === 0) {\n                teamObj = {\n                    name: teamName,\n                    points: 0,\n                    players: [],\n                    playedCount: 0,\n                    idTeam: teamId,\n                    playing: true,\n                    idRoom\n                }\n            } else {\n                teamObj = {\n                    name: teamName,\n                    points: 0,\n                    players: [],\n                    playedCount: 0,\n                    idTeam: teamId,\n                    playing: false,\n                    idRoom\n                }\n            }\n            setTeamName('') \n            socketRef.current.emit(\"create team\", teamObj)\n        }\n    }\n\n    const displayAddPlayers = (index: number) => {\n        setDisplayAddPlayer(!displayAddPlayer)\n\n        setDisplayAddPlayerByTeamNumber(index)\n    }\n\n    const handleChangeSelect = (e: any) => {\n        let idAlreadyExist\n        teamPlayers.map((player) => {\n            if (player.id === e.target.value) {                \n                idAlreadyExist = true\n            }\n        })    \n        \n        if (idAlreadyExist !== true && users !== undefined) {\n            users.map((user) => {\n                if (user !== null && user !== undefined && user.id === e.target.value) {                    \n                    setTeamPlayers([...teamPlayers, {pseudo: user.pseudo, id: user.id, playing: false}])\n                } \n            })\n        }\n    }\n\n    const handleAddPlayerToTeam = (e: any, teamId: string | number) => {\n        e.preventDefault()\n\n        const teamPlayerObj = {\n            teamPlayers,\n            teamId,\n            idRoom\n        }\n\n        setTeamPlayers([])\n        setDisplayAddPlayer(!displayAddPlayer)\n        \n        socketRef.current.emit(\"place player in team\", teamPlayerObj)\n    }\n\n    const handleRemovePlayer = (playerId: string | number | undefined, teamId: string | number) => {        \n        \n        const removePlayerObj = {\n            playerId,\n            teamId,\n            playing : false,\n            idRoom\n        }\n        \n        socketRef.current.emit(\"remove player from team\", removePlayerObj)\n    }\n\n    const handleRemoveTeam = (teamId: string | number) => {\n        const removeTeamObj = {\n            teamId,\n            idRoom\n        }\n\n        socketRef.current.emit(\"remove team\", removeTeamObj)\n    }\n\n    // const handleRemovePlayerFromPreviewTeam = (playerId: string | number | undefined,) => {\n    //     setTeamPlayers(prevTeamPlayers => (\n    //         prevTeamPlayers.filter((player) => player.id !== playerId)\n    //     ))        \n    // }\n\n    return (\n        <div className=\"team col-md-7 slide\">\n            <div>\n                <h3 className=\"mt-2\">Équipes</h3>\n                <form onSubmit={handleCreateTeam}>\n                    <input value={teamName} onChange={(e) => setTeamName(e.target.value)} placeholder=\"Nom de l'équipe\" className=\"mx-2 mon-input\" type=\"text\"/>\n                    <button type=\"submit\" className=\"mx-2 mon-bouton\">Valider</button>\n                </form>\n            </div> \n                <ul className=\"row justify-content-center mt-4 px-3\">\n                    { teams !== undefined\n                        ? teams.map((team, index) => {                        \n                            return <li className=\"p-1 my-2 col-md-6 slide\" key={index}>\n                                    <div className=\"team-border\">\n                                        <i onClick={() => handleRemoveTeam(team.idTeam)} className=\"mon-bouton rounded-circle fas fa-times\"></i>\n                                        <h4>{team.name}</h4>\n                                        <div className=\"row p-1 justify-content-center\">     \n                                        <ul className=\"col-md-8\">\n                                                {team.players.map((player, index) => {\n                                                    return <li className=\"grow\" key={index}>{player.pseudo} <i onClick={() => handleRemovePlayer(player.id, team.idTeam)} className=\"fas fa-times-circle\"></i></li>\n                                                })}\n                                            </ul>                                       \n                                            <button className=\"col-md-4 my-2 room-bouton rounded\" onClick={() => displayAddPlayers(index)} type=\"button\">\n                                                Ajouter joueur <i className=\"fas fa-caret-down\"></i>\n                                            </button>                                            \n                                        </div>                                        \n                                        <div className=\"row justify-content-center\">\n                                            { displayAddPlayer && displayAddPlayerByTeamNumber === index\n                                                ? <form onSubmit={(e) => handleAddPlayerToTeam(e, team.idTeam)} className=\"col-md-10 p-1 team-form dropdown-unfold\">\n                                                    <select multiple={true} onChange={handleChangeSelect}>\n                                                        { users?.map((user, index) => {                                                            \n                                                            if (user.available === true) {\n                                                                return <option value={user.id} key={index}>{user.pseudo}</option>                                                                                                                                                                                                \n                                                            } \n                                                        })}\n                                                    </select>\n                                                    <ul>\n                                                        { teamPlayers.map((player, index) => {\n                                                            return <li className=\"slide preview-player\"\n                                                                       key={index}\n                                                                       id={`${player.id}`}>\n                                                                {player.pseudo} \n                                                                {/* <i onClick={() => handleRemovePlayerFromPreviewTeam(player.id)} \n                                                                   className=\"mx-1 fas fa-backspace\">\n                                                                </i>  */}\n                                                                <hr/>\n                                                            </li>\n                                                        })}\n                                                    </ul>\n                                                    <button className=\"orange-button\" type=\"submit\">\n                                                        <i className=\"fas fa-check\"></i>\n                                                    </button>\n                                                 </form>\n        \n                                                : ''\n                                            }\n                                        </div>                                        \n                                    </div>\n                                   </li>\n                        })\n\n                        : ''\n                    }\n                </ul>\n        </div>\n    )\n}\n\nexport default CreateTeams\n","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/StartGame.tsx",["137","138","139","140","141","142","143","144","145","146"],"import React, { useEffect, useRef, useState } from 'react'\nimport { AdminObj, RulesObj, TeamObj } from '../Types';\nimport Game1 from './Game1';\nimport './Style/startGame.css';\nimport WaitingAnim from './WaitingAnim';\n\ntype Props = {\n    idRoom: string | number\n    socketRef: React.MutableRefObject<any>\n}\n\ntype TeamPlayers = {\n    id: string | number | undefined\n    pseudo: string | null | undefined\n}\n\nconst StartGame: React.FC<Props> = ({ idRoom, socketRef }) => {\n\n    const [startGamePreview, setStartGamePreview] = useState<boolean>(false)\n    const yourPlayingRef: React.MutableRefObject<boolean | undefined> = useRef(false)\n    // DISPLAY\n\n    const [actualTeam, setActualTeam] = useState<string>()\n    const [actualPlayer, setActualPlayer] = useState<string | null | undefined>()\n    const [actualPlayerId, setActualPlayerId] = useState<string | number | undefined>()\n\n    const [teams, setTeams] = useState<TeamObj[]>()\n    const [teamPlayers, setTeamPlayers] = useState<TeamPlayers []>([])\n\n    const [users, setUsers] = useState<AdminObj[]>()\n\n    const [round, setRound] = useState<number>(0)\n\n    useEffect(() => {\n        socketRef.current.emit(\"ask teams\", idRoom);\n        socketRef.current.on(\"teams\", (teams: TeamObj []) => {\n            yourPlayingRef.current = false\n            \n            teams.forEach((team) => {\n                if (team.playing === true) {                    \n                    setActualTeam(team.name)\n                    team.players.forEach((player) => {\n                        if (player.playing === true) {\n                            if (player.id === socketRef.current.id) {                                                    \n                                yourPlayingRef.current = true\n                            }  \n                            setActualPlayer(player.pseudo)\n                            setActualPlayerId(player.id)\n                        }\n                    })\n                }\n            })\n        });\n\n        socketRef.current.on(\"start game now\", (start: boolean) => {\n            setStartGamePreview(start)\n        })\n\n        socketRef.current.emit(\"ask rules\", idRoom)\n        socketRef.current.on(\"rules\", (rulesData: RulesObj) => {\n            setRound(rulesData.round)\n        })\n    }, [])\n\n    const startGame = () => {\n        socketRef.current.emit(\"start game\", idRoom)\n        setStartGamePreview(true)\n    }\n\n    return (\n        <>                    \n            { startGamePreview\n                ? <Game1 socketRef={socketRef} idRoom={idRoom} />\n\n                : <div className=\"transition-game\">\n                    { yourPlayingRef.current === true\n                        ? <>\n                            <h5>C'est à toi de jouer !</h5>\n                            <div className=\"d-flex flex-column justify-content-center align-items-center\" style={{height: '63vh'}}>                            \n                                <button onClick={() => startGame()} className=\"start-bouton\">Let's Go</button>\n                            </div> \n                        </>\n\n                        : <div className=\"d-flex flex-column justify-content-center align-items-center\" style={{height: '75vh'}}>\n                            <h5>Prochain joueur</h5>\n                            <div className=\"player-name\">{actualPlayer}</div>\n                            <WaitingAnim />\n                          </div>                        \n                    }     \n                </div>      \n            }            \n        </>\n    )\n}\n\nexport default StartGame\n","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Game1.tsx",["147","148","149","150","151"],"import React, {useState, useEffect, useRef} from 'react'\nimport { ListFormat } from 'typescript'\nimport { AdminObj, RulesObj, TeamObj, WordsObj } from '../Types'\nimport NextRound from './NextRound'\nimport NextTurn from './NextTurn'\n\nimport './Style/timer.css';\nimport './Style/board.css';\nimport './Style/game.css';\nimport Board from './Board'\n\ntype Props = {\n    idRoom: string | number\n    socketRef: React.MutableRefObject<any>\n}\n\nconst Game1: React.FC<Props>  = ({ idRoom, socketRef }) => {\n\n    const yourPlayingRef: React.MutableRefObject<boolean | undefined> = useRef(false)\n    const thisRound: React.MutableRefObject<number> = useRef(0)\n\n    const [displayEndTurn, setDisplayEndTurn] = useState<boolean>(false);\n    const [displayNextRound, setDisplayNextRound] = useState<boolean>(false);\n\n    const [round, setRound] = useState<number>(0);\n\n    const [words, setWords] = useState<string []>([]);\n    const [actualWord, setActualWord] = useState<string>();\n    const [actualRound, setActualRound] = useState<number>();\n    const [actualPoints, setActualPoints] = useState<number>(0);\n    const [actualPointsDelay, setActualPointsDelay] = useState<number>(0);\n\n    const [actualTeam, setActualTeam] = useState<string>()\n    const [actualPlayer, setActualPlayer] = useState<string | null | undefined>()\n\n    const [time, setTime] = useState<number>(1)\n    const [forAnimationTime, setForAnimationTime] = useState<number>(100)\n\n    const getRandomInteger = (min: number, max: number) => {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    useEffect(() => {\n        \n        // socketRef.current.emit(\"ask rules\", idRoom)\n        // socketRef.current.on(\"rules\", (rulesData: RulesObj) => {\n        //     setActualRound(rulesData.round)\n        // }) // Surement à modifier\n\n        socketRef.current.emit(\"ask rules\", idRoom)\n\n        socketRef.current.on(\"rules\", (rulesData: RulesObj) => {   \n            \n            if (rulesData.round === 2) {\n                setTime(rulesData.timeDraw)\n                setForAnimationTime(rulesData.timeDraw)\n            } else {\n                setTime(rulesData.time)\n                setForAnimationTime(rulesData.time)\n            }\n\n            setRound(rulesData.round)\n\n            thisRound.current = rulesData.round; \n\n            // setTimeout(() => {\n            //     clearInterval(interval)\n            // }, rulesData.time*1500)            \n        })\n\n        socketRef.current.emit(\"ask words\", idRoom);\n        socketRef.current.on(\"words\", (words: WordsObj) => {\n\n            let randomNumber: number;\n\n            if (thisRound.current === 0) {\n                randomNumber = getRandomInteger(0, words.round1.length - 1)\n            } else if (thisRound.current === 1) {\n                randomNumber = getRandomInteger(0, words.round2.length - 1)\n            } else {\n                randomNumber = getRandomInteger(0, words.round3.length - 1)\n            }\n                        \n            if (thisRound.current === 0) {\n                words.round1.forEach((word, index) => {\n                    if (randomNumber === index) {\n                        setActualWord(word)\n                    }\n                })\n                setWords(words.round1);\n            } else if (thisRound.current === 1) {\n                words.round2.forEach((word, index) => {\n                    if (randomNumber === index) {\n                        setActualWord(word)\n                    }\n                })\n                setWords(words.round2);\n            } else {\n                words.round3.forEach((word, index) => {\n                    if (randomNumber === index) {\n                        setActualWord(word)\n                    }\n                })\n                setWords(words.round3);\n            }\n        });\n\n        socketRef.current.on(\"points\", (points: number) => {\n            setActualPoints(points);\n            setTimeout(() => {\n                setActualPointsDelay(points)\n            }, 1000)\n        });\n\n        socketRef.current.emit(\"ask teams\", idRoom);\n        socketRef.current.on(\"teams\", (teams: TeamObj []) => {            \n            teams.forEach((team) => {\n                if (team.playing === true) {                    \n                    setActualTeam(team.name)\n                    team.players.forEach((player) => {\n                        if (player.playing === true) {\n                            if (player.id === socketRef.current.id) {                    \n                                yourPlayingRef.current = true\n                            }  \n                            setActualPlayer(player.pseudo)\n                        }\n                    })\n                }\n            })\n        });\n\n        socketRef.current.on(\"display next round\", (displayBool: boolean) => {\n            setDisplayNextRound(displayBool);\n        })    \n\n        setInterval(() => {\n            setTime(time => time - 1)   \n        }, 1000)\n        \n    }, [])\n\n    useEffect(() => {\n        if (yourPlayingRef.current === false) {\n            let points = document.querySelectorAll('[class*=\"part-circle\"]')\n\n            for (let index = 0; index < points.length; index++) {\n                points[index].classList.add('bubble-animNoDelay')\n            }\n\n            setTimeout(() => {\n                for (let index = 0; index < points.length; index++) {\n                    points[index].classList.remove('bubble-animNoDelay')\n                }\n            }, 2500)\n        }\n        \n    }, [actualPoints])\n\n    const goodRandomWord = () => {  \n        \n        let wordCircle = document.querySelector<HTMLElement>('.word')\n        let pointsPosition = document.querySelector<HTMLElement>('.position-points')\n        let pointsPositionDraw = document.querySelector<HTMLElement>('.position-points-draw')\n        let drop = document.querySelector<HTMLElement>('.liquid2')\n\n        let points = document.querySelectorAll('[class*=\"part-circle\"]')\n        console.log(points);\n\n        for (let index = 0; index < points.length; index++) {\n            points[index].classList.add('bubble-anim')\n        }\n\n        if (thisRound.current === 0 || thisRound.current === 1) {\n            wordCircle?.classList.add('goodWord-anim');\n        } else {\n            wordCircle?.classList.add('goodWord-anim-draw');\n        }\n        \n\n        \n        if (pointsPosition !== null) {\n            pointsPosition.classList.remove('justify-content-between')\n            pointsPosition.style.justifyContent = 'flex-end'\n        }      \n        \n        if (pointsPositionDraw !== null) {\n            pointsPositionDraw.classList.remove('justify-content-between')\n            pointsPositionDraw.style.justifyContent = 'flex-end'\n        }   \n\n        setTimeout(() => {\n            pointsPosition?.classList.add('justify-content-between')\n            pointsPositionDraw?.classList.add('justify-content-between')\n            wordCircle?.classList.remove('goodWord-anim');\n            wordCircle?.classList.remove('goodWord-anim-draw');\n            drop?.classList.add('drop-anim')\n            if (wordCircle !== null) {       \n                wordCircle.style.transform = 'scale(1)'\n            }\n        }, 1000)\n\n        setTimeout(() => {\n            for (let index = 0; index < points.length; index++) {\n                points[index].classList.remove('bubble-anim')\n            }\n        }, 2500)\n        \n        words.forEach((word, index) => {\n            if (actualWord === word) {\n                words.splice(index, 1)                  \n            }\n        })\n        \n        let randomNumber = getRandomInteger(0, words.length - 1)\n\n        words.forEach((word, index) => {\n            if (randomNumber === index) {\n                setActualWord(word)                \n            }\n        })        \n\n        let addPointObj = {\n            idRoom,\n            idPlayer: socketRef.current.id\n        }        \n\n        socketRef.current.emit(\"add point\", addPointObj);\n        \n        if (words.length === 0) {\n            nextRound();\n        }\n\n        if (thisRound.current === 2) {\n            let canvas = document.getElementById('board') as HTMLCanvasElement;        \n\n            let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n            let inputColor = document.querySelector('.color-brush') as HTMLInputElement\n\n            if (inputColor !== null) {\n                inputColor.value = '#000000'\n            }\n\n            ctx.clearRect(0, 0, 0, 0)\n\n            canvas.height = 400\n\n            socketRef.current.emit(\"erase board\", idRoom);\n\n            let allPenWidth = document.querySelectorAll('.pen-width li');\n\n            allPenWidth.forEach((penWidth, index) => {\n                if (index === 0) {                \n                    penWidth.classList.add('picked')   \n                } else {\n                    penWidth.classList.remove('picked')   \n                }\n            })\n\n            ctx.lineWidth = 4;\n            \n        }\n        \n    }\n\n    const nextRound = () => {\n        setDisplayNextRound(true)\n\n        if (yourPlayingRef.current === true) {\n            let updatedWordsObj= {\n                idRoom,\n                words\n            }\n            \n            socketRef.current.emit(\"update words\", updatedWordsObj);\n        }\n\n        socketRef.current.emit(\"next round\", idRoom);\n    }\n\n    const passRandomWord = () => {\n        let randomNumber = getRandomInteger(0, words.length - 1)\n        \n        do {\n            randomNumber = getRandomInteger(0, words.length - 1)\n        } while (words[randomNumber] === actualWord);\n\n        words.forEach((word, index) => {\n            if (randomNumber === index) {\n                setActualWord(word)\n            }\n        })\n\n        if (thisRound.current === 2) {            \n            let canvas = document.getElementById('board') as HTMLCanvasElement;        \n\n            let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n            let inputColor = document.querySelector('.color-brush') as HTMLInputElement\n\n            if (inputColor !== null) {\n                inputColor.value = '#000000'\n            }\n        \n            ctx.clearRect(0, 0, 0, 0)\n\n            canvas.height = 400\n\n            socketRef.current.emit(\"erase board\", idRoom);\n\n            let allPenWidth = document.querySelectorAll('.pen-width li');\n\n            allPenWidth.forEach((penWidth, index) => {\n                if (index === 0) {                \n                    penWidth.classList.add('picked')   \n                } else {\n                    penWidth.classList.remove('picked')   \n                }\n            })\n\n            console.log(ctx.lineWidth);            \n\n            ctx.lineWidth = 4;\n\n            console.log(ctx.lineWidth);\n        }\n    }\n\n    const endTurn = () => {\n        if (yourPlayingRef.current === true) {\n            let updatedWordsObj= {\n                idRoom,\n                words\n            }\n            \n            socketRef.current.emit(\"update words\", updatedWordsObj);\n        }\n        \n        setDisplayEndTurn(true)\n    }     \n\n    return (\n        <> \n            { displayNextRound\n                ? <NextRound socketRef={socketRef} idRoom={idRoom} />\n\n                : <div>\n                    { displayEndTurn\n                        ? <NextTurn socketRef={socketRef} idRoom={idRoom} playerName={actualPlayer} team={actualTeam} points={actualPoints} />\n\n                        : <div className=\"transition-game d-flex flex-column\" style={{height: '75vh'}}>  \n                            <div className=\"position-chrono\">\n                                <h5 style={{ height: '20vh'}}>Phase { round + 1 }</h5>\n                                <section id=\"chrono-box\">\n                                    <div className=\"chrono\">\n                                        <div className=\"skill\">\n                                            <div className=\"outer\">\n                                                <div className=\"inner\">\n                                                <div className=\"timer-number\">\n                                                    { time < 1\n                                                        ? endTurn()\n\n                                                        : ''\n                                                    }\n                                                    {time}                                                       \n                                                </div>\n                                                </div>\n                                            </div>          \n                                        </div> \n\n                                        <svg width=\"160px\" height=\"160px\">\n                                        <defs>\n                                            <linearGradient id=\"GradientColor\">\n                                                <stop offset=\"0%\" stopColor=\"#e91e63\" />\n                                                <stop offset=\"100%\" stopColor=\"#673ab7\" />\n                                            </linearGradient>\n                                        </defs>\n                                        <circle cx=\"80\" cy=\"80\" r=\"70\" strokeLinecap=\"round\" style={{ animation: `timer ${forAnimationTime}s linear infinite`}} />\n                                        </svg>\n                                    </div>                           \n                                </section>\n                                <div className=\"points\">                                      \n                                    {/* <div className=\"points-bucket\"></div>\n                                    <div className=\"liquid1\"></div>\n                                    <div className=\"liquid2\"></div> */}\n                                    <div className=\"points-box\">\n                                        <div className=\"part-circle1\"></div>\n                                        <div className=\"part-circle2\"></div>\n                                        <div className=\"part-circle3\"></div>\n                                        <div className=\"part-circle4\"></div>\n                                        <div className=\"part-circle5\"></div>\n                                        <div className=\"part-circle6\"></div>\n                                        <div className=\"part-circle7\"></div>\n                                        <div className=\"part-circle8\"></div>\n                                        <div className=\"part-circle9\"></div>\n                                        <div className=\"part-circle10\"></div>\n                                        <div className=\"part-circle11\"></div>\n                                        <div className=\"part-circle12\"></div>             \n                                        <span className=\"empty-circle\"></span>      \n\n                                        { yourPlayingRef.current === true\n                                            ? <span style={{ marginLeft: '40px' }}>{actualPointsDelay >= 1 ? `${actualPointsDelay} Points` : `${actualPointsDelay} Point`}</span>\n                                            \n                                            :<span style={{ marginLeft: '40px' }}>{actualPoints >= 1 ? `${actualPoints} Points` : `${actualPoints} Point`}</span>\n                                        }                                        \n                                    </div>\n                                </div>\n                            </div>     \n                           \n                            { thisRound.current === 0 || thisRound.current === 1\n                                ? <>\n                                    { yourPlayingRef.current === true\n                                        ? <div className=\"d-flex flex-column justify-content-between position-points\">\n                                            <div className=\"word\">\n                                                <div>{actualWord}</div>\n                                            </div>                                            \n                                            <div className=\"row col-4 align-items-center mx-auto\">                                                \n                                                <button onClick={() => passRandomWord()} className=\"passWord\">\n                                                    <i className=\"fas fa-times\"></i>\n                                                </button>\n                                                <button onClick={() => goodRandomWord()} className=\"goodWord\">\n                                                    <i className=\"fas fa-check\"></i>\n                                                </button>\n                                            </div>                                            \n                                        </div> \n                        \n                                        : <div className=\"\">\n                                            <div className=\"player-name\">\n                                                {actualPlayer}\n                                            </div>       \n                                            <p className=\"text-points\">\n                                                <span>de la team {actualTeam} et entrain de jouer</span>\n                                            </p> \n                                        </div>  \n                                    }   \n                                  </>\n\n                                : <>\n                                    { yourPlayingRef.current === true\n                                        ? <div className=\"row justify-content-between\">                                    \n                                            <Board socketRef={socketRef} idRoom={idRoom} imPlaying={true} />\n                                            <div className=\"col-5 d-flex flex-column justify-content-between position-points-draw\">\n                                                <div className=\"word\">\n                                                    <div>{actualWord}</div>\n                                                </div>                                            \n                                                <div className=\"row align-items-center\">                                       \n                                                    <button onClick={() => passRandomWord()} className=\"passWord\">\n                                                        <i className=\"fas fa-times\"></i>\n                                                    </button>\n                                                    <button onClick={() => goodRandomWord()} className=\"goodWord\">\n                                                        <i className=\"fas fa-check\"></i>\n                                                    </button>\n                                                </div>                                            \n                                            </div> \n                                            \n                                        </div> \n                        \n                                        : <div className=\"text-light\">\n                                            <Board socketRef={socketRef} idRoom={idRoom} imPlaying={false} />\n                                        </div>  \n                                    }\n                                  </>\n                            }                  \n                \n                                                                         \n                        </div>\n                    }\n                 </div>                         \n            }\n            \n        </>\n        \n    )\n}\n\nexport default Game1\n","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Chrono.tsx",["152","153"],"import React, { useEffect, useRef, useState } from 'react'\nimport { RulesObj } from '../Types'\n\ntype Props = {\n    idRoom: string | number\n    socketRef: React.MutableRefObject<any>\n    setDisplayEndTurn: React.Dispatch<boolean>\n}\n\nconst Chrono: React.FC<Props>  = ({ idRoom, socketRef, setDisplayEndTurn }) => {\n\n    const [time, setTime] = useState<number>(1)\n\n    useEffect(() => {        \n        socketRef.current.emit(\"ask rules\", idRoom)\n\n        socketRef.current.on(\"rules\", (rulesData: RulesObj) => {\n            setTime(rulesData.time)\n\n            setTimeout(() => {\n                clearInterval(interval)\n            }, rulesData.time*1000)\n        })\n\n        let interval = setInterval(() => {\n            setTime(time => time - 1)        \n        }, 1000)\n    }, [])\n\n    return (\n        <div>\n            { time < 1\n                ? setDisplayEndTurn(true)\n\n                :''\n            }\n            Time: {time}\n        </div>\n    )\n}\n\nexport default Chrono\n",["154","155"],"/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/NextTurn.tsx",["156","157"],"import React, { useEffect, useRef, useState } from 'react'\nimport { RoomObj, TeamObj } from '../Types'\nimport StartGameTransition from './StartGame';\n\ntype Props = {\n    playerName: string | null | undefined\n    team: string | undefined\n    points: number\n    idRoom: string | number\n    socketRef: React.MutableRefObject<any>\n}\n\nconst NextTurn: React.FC<Props> = ({ playerName, team, points, idRoom, socketRef }) => {\n\n    const yourPlayingRef: React.MutableRefObject<boolean | undefined> = useRef(false)\n\n    const [displayStartGame, setDisplayStartGame] = useState(false)\n    // const [updateTeamPlayedCount, setUpdateTeamPlayedCount] = useState<number>(0)\n\n    useEffect(() => {\n        socketRef.current.on(\"start game prvw\", (start: boolean) => {\n            setDisplayStartGame(start)\n        })\n\n        // socketRef.current.emit(\"ask room\", idRoom);\n\n        // socketRef.current.on(\"room\", (room: RoomObj) => {\n        //     setUpdateTeamPlayedCount(room.teamPlayedCount)\n        // });\n\n        socketRef.current.emit(\"ask teams\", idRoom);\n\n        socketRef.current.emit(\"ask teams\", idRoom);\n        socketRef.current.on(\"teams\", (teams: TeamObj []) => {            \n            teams.forEach((team) => {\n                if (team.playing === true) {                    \n                    team.players.forEach((player) => {\n                        if (player.playing === true) {\n                            if (player.id === socketRef.current.id) {                    \n                                yourPlayingRef.current = true\n                            }  \n                        }\n                    })\n                }\n            })\n        });\n    }, [])\n\n    const startGamePreview = () => {\n        socketRef.current.emit(\"start game preview\", idRoom)\n\n        socketRef.current.emit(\"set playing team and player\", idRoom)\n\n        setDisplayStartGame(true)\n    }\n\n    return (\n        <>\n            { displayStartGame\n                ? <StartGameTransition socketRef={socketRef} idRoom={idRoom} />\n\n                : <div className=\"transition-game d-flex flex-column justify-content-center align-itmes-center\" style={{height: '75vh'}}>      \n                    <div className=\"player-name\">\n                        {playerName}\n                    </div>       \n                    <p className=\"text-points\">\n                       <span> a remporté <span className=\"team-name\">{points}</span> {points <= 1 ? 'point' : 'points'} pour la team  </span> <span className=\"team-name ms-1\"> {team} </span>\n                    </p>                        \n                    { yourPlayingRef.current === true\n                        ? <button onClick={() => startGamePreview()} className=\"mon-bouton mx-auto\">\n                            Suivant\n                        </button>  \n\n                        :''\n                    }\n                    \n                  </div>      \n            }            \n        </>\n    )\n}\n\nexport default NextTurn","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/NextRound.tsx",["158"],"import React, { useEffect, useRef, useState } from 'react'\nimport { RulesObj, TeamObj } from '../Types'\nimport StartGame from './StartGame'\n\ntype Props = {\n    idRoom: string | number\n    socketRef: React.MutableRefObject<any>\n}\n\nconst NextRound: React.FC<Props> = ({ idRoom, socketRef }) => {\n\n    const yourPlayingRef: React.MutableRefObject<boolean | undefined> = useRef(false)\n\n    const [teams, setTeams] = useState<TeamObj []>()\n    const [round, setRound] = useState<number>(0)\n    const [displayStartGame, setDisplayStartGame] = useState(false)\n\n    useEffect(() => {\n        socketRef.current.on(\"start game prvw\", (start: boolean) => {\n            setDisplayStartGame(start)\n        })\n\n        socketRef.current.emit(\"ask rules\", idRoom)\n        socketRef.current.on(\"rules\", (rulesData: RulesObj) => {\n            setRound(rulesData.round)\n        })\n\n        socketRef.current.emit(\"ask teams\", idRoom);\n        socketRef.current.on(\"teams\", (teams: TeamObj []) => {   \n            setTeams(teams)\n            \n            teams.forEach((team) => {\n                if (team.playing === true) {                    \n                    team.players.forEach((player) => {\n                        if (player.playing === true) {\n                            if (player.id === socketRef.current.id) {                    \n                                yourPlayingRef.current = true\n                            }  \n                        }                        \n                    })\n                }\n            })\n        });\n    }, [])\n\n    const startNextRound = () => {\n        socketRef.current.emit(\"start game preview\", idRoom)        \n\n        socketRef.current.emit(\"set playing team and player\", idRoom)\n\n        setDisplayStartGame(true)\n    }\n\n    return (\n        <>\n            { displayStartGame\n                ? <StartGame socketRef={socketRef} idRoom={idRoom} />\n\n                : <>\n                    <h5>Phase {round} fini !</h5>\n\n                    <div className=\"row justify-content-between mx-auto\" style={{ width: '80%'}}>\n                        {teams?.map((team, index) => {\n\n\n                            return <>\n                                    <div className=\"team-results col-md-3 grow\">\n                                        <h4>{team.name}</h4> \n                                        <p> {team.points} {team.points <= 1 ? 'point' : 'points'}</p> \n                                    </div>\n                                </>\n                        })}\n                    </div>                    \n\n                    { yourPlayingRef.current === true\n                        ? <button onClick={() => startNextRound()} className=\"mon-bouton mx-auto\">\n                            Phase suivante !\n                        </button>\n\n                        :''\n                    }\n                    \n                  </>\n\n            }\n            \n        </>\n    )\n}\n\nexport default NextRound\n","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Board.tsx",["159","160","161","162"],"import React, { useEffect, useRef, useState } from 'react'\nimport { TeamObj } from '../Types';\n\ntype Props = {\n    idRoom: string | number\n    socketRef: React.MutableRefObject<any>\n    imPlaying: boolean | undefined\n}\n\ntype mouseNumber = {\n    x: number\n    y: number\n}\n\ntype DrawData = {\n    idRoom: string | number\n    last_mouse: mouseNumber\n    mouse: mouseNumber\n    widthOfLine: number\n    colorOfLine: string\n    base64ImageData: string\n}\n\n\n\nconst Board: React.FC<Props>  = ({ idRoom, socketRef, imPlaying }) => {  \n    \n    useEffect(() => {\n        socketRef.current.on(\"board erased\", (bool: boolean) => {\n            let canvas = document.getElementById('board') as HTMLCanvasElement;  \n            \n            if (canvas !== null) {\n                let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;       \n            \n                let inputColor = document.querySelector('.color-brush') as HTMLInputElement\n\n                if (inputColor !== null) {\n                    inputColor.value = '#000'\n                }\n                \n                ctx.clearRect(0, 0, 0, 0)\n                            \n                ctx.lineWidth = 4;\n\n                canvas.height = 400\n            }\n    \n            \n        })\n        \n        if (imPlaying === true) {\n            drawOnCanvas();\n        } else {\n            socketRef.current.on(\"canvas data drawn img\", (dataDrawing: DrawData) => {                                                        \n                let canvas = document.getElementById('board') as HTMLCanvasElement; \n                \n                if (canvas !== null) {\n                    let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n                    ctx.lineWidth = dataDrawing.widthOfLine;\n                    ctx.strokeStyle = dataDrawing.colorOfLine;\n\n                    let image = new Image()\n                    image.onload = function() {\n                        ctx.drawImage(image, 0, 0)\n                    }\n                    image.src = dataDrawing.base64ImageData\n                }\n\n\n                // ctx.beginPath();\n                // ctx.moveTo(dataDrawing.last_mouse.x, dataDrawing.last_mouse.y);\n                // ctx.lineTo(dataDrawing.mouse.x, dataDrawing.mouse.y);\n                // ctx.closePath();\n                // ctx.stroke();\n            })\n        }\n        \n    }, [imPlaying])\n\n    const drawOnCanvas = () => {\n        \n        let canvas = document.getElementById('board') as HTMLCanvasElement;        \n        \n        let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;        \n    \n        // let sketch = document.querySelector('#sketch') as HTMLDivElement;\n        // let sketch_style = getComputedStyle(sketch);\n        canvas.width = parseInt(getComputedStyle(canvas).getPropertyValue('width'));\n        canvas.height = parseInt(getComputedStyle(canvas).getPropertyValue('height'));        \n    \n        let mouse = {x: 0, y: 0};\n        let last_mouse = {x: 0, y: 0};\n    \n        /* Mouse Capturing Work */\n        canvas.addEventListener('mousemove', function(e) {\n            \n            last_mouse.x = mouse.x;\n            last_mouse.y = mouse.y;\n    \n            mouse.x = e.pageX - this.offsetLeft;\n            mouse.y = e.pageY - this.offsetTop;\n        }, false);\n    \n    \n        /* Drawing on Paint App */\n        ctx.lineWidth = 2;\n        ctx.lineJoin = 'round';\n        ctx.lineCap = 'round';\n        ctx.strokeStyle = 'black';\n    \n        canvas.addEventListener('mousedown', function(e) {\n            canvas.addEventListener('mousemove', onPaint, false);\n        }, false);\n    \n        canvas.addEventListener('mouseup', function() {\n            canvas.removeEventListener('mousemove', onPaint, false);\n        }, false);\n\n\n        let onPaint = function() {      \n            ctx.beginPath();\n            ctx.moveTo(last_mouse.x, last_mouse.y);\n            ctx.lineTo(mouse.x, mouse.y);\n            ctx.closePath();\n            ctx.stroke();\n\n            let base64ImageData = canvas.toDataURL('image/png')\n\n            let drawingObj = {\n                idRoom,\n                last_mouse,\n                mouse,\n                widthOfLine: ctx.lineWidth,\n                colorOfLine: ctx.strokeStyle,\n                base64ImageData\n            }\n\n            socketRef.current.emit(\"canvas data drawn\", drawingObj);\n        };\n\n        requestAnimationFrame(onPaint)\n\n    }     \n    \n    const changePenWidth = (e: any) => {  \n        let inputColor = document.querySelector('.color-brush') as HTMLInputElement\n        \n        let newLineWidth = parseFloat(e.currentTarget.getAttribute('class')) \n        document.querySelector('.eraser')?.classList.remove('picked')       \n\n        let allPenWidth = document.querySelectorAll('.pen-width li');\n\n        allPenWidth.forEach((penWidth) => {\n            if (penWidth === e.currentTarget) {                \n                penWidth.classList.add('picked')   \n            } else {\n                penWidth.classList.remove('picked')       \n            }\n        })\n        \n        let canvas = document.getElementById('board') as HTMLCanvasElement;        \n\n        let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n        ctx.lineWidth = newLineWidth;\n        ctx.strokeStyle = inputColor.value;\n    }\n\n    const changePenColor = (e: any) => {\n        let newLineColor = e.currentTarget.value\n        \n        let canvas = document.getElementById('board') as HTMLCanvasElement;        \n\n        let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n        ctx.strokeStyle = newLineColor;\n    }\n\n    const changePenToEraser = (e: any) => {    \n\n        let allPenWidth = document.querySelectorAll('.pen-width li');\n\n        e.currentTarget.classList.add('picked') \n\n        allPenWidth.forEach((penWidth) => {\n                penWidth.classList.remove('picked')       \n        })\n        \n        let canvas = document.getElementById('board') as HTMLCanvasElement;        \n\n        let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n        ctx.strokeStyle = 'white';\n    }\n\n    return (\n        <>\n        { imPlaying === true\n            ? <div className=\"col-7 row\">            \n                <section id=\"draw\">\n                    <div className=\"sketch\" id=\"sketch\">\n                        <canvas id=\"board\" width=\"600\" height=\"400\"></canvas>    \n                    </div>\n                </section>\n                <div className=\"col-md-1 d-flex flex-column align-items-start justify-content-between\">\n                    <div className=\"color-brush-box\">\n                        <i className=\"fas fa-palette\"></i>\n                        <input onChange={(e) => changePenColor(e)} className=\"color-brush mx-auto\" type=\"color\"/>\n                    </div>\n                    <div onClick={(e) => changePenToEraser(e)} className=\"eraser mx-auto\"><i className=\"fas fa-eraser\"></i></div>\n                    <ul className=\"pen-width d-flex flex-column justify-content-between mx-auto\">                \n                        <li className=\"2 picked\" onClick={(e) => changePenWidth(e)} > <span></span> </li>\n                        <li className=\"4\" onClick={(e) => changePenWidth(e)} > <span></span> </li>\n                        <li className=\"10\" onClick={(e) => changePenWidth(e)} > <span></span> </li>\n                        <li className=\"15\" onClick={(e) => changePenWidth(e)} > <span></span> </li>\n                        <li className=\"30\" onClick={(e) => changePenWidth(e)} > <span></span> </li>\n                    </ul>\n                </div>                        \n            </div>\n\n            : <div className=\"col-md-12 row justify-content-center\">            \n                <section id=\"draw\">\n                    <div className=\"sketch\" id=\"sketch\">\n                        <canvas id=\"board\" width=\"600\" height=\"400\"></canvas>    \n                    </div>\n                </section>                   \n            </div>\n        }            \n        </>\n    )\n}\n\nexport default Board\n","/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/WaitingAnim.tsx",[],"/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/index.tsx",[],"/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/reportWebVitals.ts",[],"/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/App.tsx",["163","164"],"/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/CreateJoinRoom.tsx",[],"/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/Room.tsx",["165","166","167","168"],"/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/CreateTeams.tsx",["169","170","171","172","173"],"/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/Messenger.tsx",["174"],"/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/StartGame.tsx",["175","176","177","178","179","180","181","182","183","184"],"/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/Game1.tsx",["185","186","187","188","189"],"/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/WaitingAnim.tsx",[],"/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/NextRound.tsx",["190"],"/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/NextTurn.tsx",["191","192"],"/Users/nikolamorice-gallier/Desktop/Projets/online-timesup/client/src/Components/Board.tsx",["193","194","195","196"],{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":5,"column":10,"nodeType":"203","messageId":"204","endLine":5,"endColumn":22},{"ruleId":"201","severity":1,"message":"205","line":8,"column":8,"nodeType":"203","messageId":"204","endLine":8,"endColumn":13},{"ruleId":"201","severity":1,"message":"206","line":27,"column":12,"nodeType":"203","messageId":"204","endLine":27,"endColumn":20},{"ruleId":"201","severity":1,"message":"207","line":34,"column":12,"nodeType":"203","messageId":"204","endLine":34,"endColumn":17},{"ruleId":"201","severity":1,"message":"208","line":34,"column":19,"nodeType":"203","messageId":"204","endLine":34,"endColumn":27},{"ruleId":"209","severity":1,"message":"210","line":72,"column":8,"nodeType":"211","endLine":72,"endColumn":18,"suggestions":"212"},{"ruleId":"209","severity":1,"message":"213","line":26,"column":8,"nodeType":"211","endLine":26,"endColumn":18,"suggestions":"214"},{"ruleId":"201","severity":1,"message":"215","line":22,"column":12,"nodeType":"203","messageId":"204","endLine":22,"endColumn":16},{"ruleId":"209","severity":1,"message":"216","line":47,"column":8,"nodeType":"211","endLine":47,"endColumn":26,"suggestions":"217"},{"ruleId":"218","severity":1,"message":"219","line":91,"column":34,"nodeType":"220","messageId":"221","endLine":91,"endColumn":36},{"ruleId":"218","severity":1,"message":"219","line":98,"column":30,"nodeType":"220","messageId":"221","endLine":98,"endColumn":32},{"ruleId":"218","severity":1,"message":"222","line":178,"column":84,"nodeType":"220","messageId":"223","endLine":178,"endColumn":86},{"ruleId":"201","severity":1,"message":"224","line":23,"column":12,"nodeType":"203","messageId":"204","endLine":23,"endColumn":22},{"ruleId":"201","severity":1,"message":"225","line":25,"column":12,"nodeType":"203","messageId":"204","endLine":25,"endColumn":26},{"ruleId":"201","severity":1,"message":"226","line":27,"column":12,"nodeType":"203","messageId":"204","endLine":27,"endColumn":17},{"ruleId":"201","severity":1,"message":"227","line":27,"column":19,"nodeType":"203","messageId":"204","endLine":27,"endColumn":27},{"ruleId":"201","severity":1,"message":"228","line":28,"column":12,"nodeType":"203","messageId":"204","endLine":28,"endColumn":23},{"ruleId":"201","severity":1,"message":"229","line":28,"column":25,"nodeType":"203","messageId":"204","endLine":28,"endColumn":39},{"ruleId":"201","severity":1,"message":"230","line":30,"column":12,"nodeType":"203","messageId":"204","endLine":30,"endColumn":17},{"ruleId":"201","severity":1,"message":"231","line":30,"column":19,"nodeType":"203","messageId":"204","endLine":30,"endColumn":27},{"ruleId":"201","severity":1,"message":"207","line":32,"column":12,"nodeType":"203","messageId":"204","endLine":32,"endColumn":17},{"ruleId":"209","severity":1,"message":"232","line":63,"column":8,"nodeType":"211","endLine":63,"endColumn":10,"suggestions":"233"},{"ruleId":"201","severity":1,"message":"234","line":2,"column":10,"nodeType":"203","messageId":"204","endLine":2,"endColumn":20},{"ruleId":"201","severity":1,"message":"235","line":3,"column":10,"nodeType":"203","messageId":"204","endLine":3,"endColumn":18},{"ruleId":"201","severity":1,"message":"236","line":29,"column":12,"nodeType":"203","messageId":"204","endLine":29,"endColumn":23},{"ruleId":"201","severity":1,"message":"237","line":29,"column":25,"nodeType":"203","messageId":"204","endLine":29,"endColumn":39},{"ruleId":"209","severity":1,"message":"232","line":140,"column":8,"nodeType":"211","endLine":140,"endColumn":10,"suggestions":"238"},{"ruleId":"201","severity":1,"message":"239","line":1,"column":28,"nodeType":"203","messageId":"204","endLine":1,"endColumn":34},{"ruleId":"209","severity":1,"message":"232","line":28,"column":8,"nodeType":"211","endLine":28,"endColumn":10,"suggestions":"240"},{"ruleId":"197","replacedBy":"241"},{"ruleId":"199","replacedBy":"242"},{"ruleId":"201","severity":1,"message":"243","line":2,"column":10,"nodeType":"203","messageId":"204","endLine":2,"endColumn":17},{"ruleId":"209","severity":1,"message":"232","line":47,"column":8,"nodeType":"211","endLine":47,"endColumn":10,"suggestions":"244"},{"ruleId":"209","severity":1,"message":"232","line":44,"column":8,"nodeType":"211","endLine":44,"endColumn":10,"suggestions":"245"},{"ruleId":"201","severity":1,"message":"239","line":1,"column":28,"nodeType":"203","messageId":"204","endLine":1,"endColumn":34},{"ruleId":"201","severity":1,"message":"246","line":1,"column":36,"nodeType":"203","messageId":"204","endLine":1,"endColumn":44},{"ruleId":"201","severity":1,"message":"247","line":2,"column":10,"nodeType":"203","messageId":"204","endLine":2,"endColumn":17},{"ruleId":"209","severity":1,"message":"248","line":79,"column":8,"nodeType":"211","endLine":79,"endColumn":19,"suggestions":"249"},{"ruleId":"201","severity":1,"message":"202","line":5,"column":10,"nodeType":"203","messageId":"204","endLine":5,"endColumn":22},{"ruleId":"201","severity":1,"message":"205","line":8,"column":8,"nodeType":"203","messageId":"204","endLine":8,"endColumn":13},{"ruleId":"201","severity":1,"message":"206","line":27,"column":12,"nodeType":"203","messageId":"204","endLine":27,"endColumn":20},{"ruleId":"201","severity":1,"message":"207","line":34,"column":12,"nodeType":"203","messageId":"204","endLine":34,"endColumn":17},{"ruleId":"201","severity":1,"message":"208","line":34,"column":19,"nodeType":"203","messageId":"204","endLine":34,"endColumn":27},{"ruleId":"209","severity":1,"message":"210","line":72,"column":8,"nodeType":"211","endLine":72,"endColumn":18,"suggestions":"250"},{"ruleId":"201","severity":1,"message":"215","line":22,"column":12,"nodeType":"203","messageId":"204","endLine":22,"endColumn":16},{"ruleId":"209","severity":1,"message":"216","line":47,"column":8,"nodeType":"211","endLine":47,"endColumn":26,"suggestions":"251"},{"ruleId":"218","severity":1,"message":"219","line":91,"column":34,"nodeType":"220","messageId":"221","endLine":91,"endColumn":36},{"ruleId":"218","severity":1,"message":"219","line":98,"column":30,"nodeType":"220","messageId":"221","endLine":98,"endColumn":32},{"ruleId":"218","severity":1,"message":"222","line":178,"column":84,"nodeType":"220","messageId":"223","endLine":178,"endColumn":86},{"ruleId":"209","severity":1,"message":"213","line":26,"column":8,"nodeType":"211","endLine":26,"endColumn":18,"suggestions":"252"},{"ruleId":"201","severity":1,"message":"224","line":23,"column":12,"nodeType":"203","messageId":"204","endLine":23,"endColumn":22},{"ruleId":"201","severity":1,"message":"225","line":25,"column":12,"nodeType":"203","messageId":"204","endLine":25,"endColumn":26},{"ruleId":"201","severity":1,"message":"226","line":27,"column":12,"nodeType":"203","messageId":"204","endLine":27,"endColumn":17},{"ruleId":"201","severity":1,"message":"227","line":27,"column":19,"nodeType":"203","messageId":"204","endLine":27,"endColumn":27},{"ruleId":"201","severity":1,"message":"228","line":28,"column":12,"nodeType":"203","messageId":"204","endLine":28,"endColumn":23},{"ruleId":"201","severity":1,"message":"229","line":28,"column":25,"nodeType":"203","messageId":"204","endLine":28,"endColumn":39},{"ruleId":"201","severity":1,"message":"230","line":30,"column":12,"nodeType":"203","messageId":"204","endLine":30,"endColumn":17},{"ruleId":"201","severity":1,"message":"231","line":30,"column":19,"nodeType":"203","messageId":"204","endLine":30,"endColumn":27},{"ruleId":"201","severity":1,"message":"207","line":32,"column":12,"nodeType":"203","messageId":"204","endLine":32,"endColumn":17},{"ruleId":"209","severity":1,"message":"232","line":63,"column":8,"nodeType":"211","endLine":63,"endColumn":10,"suggestions":"253"},{"ruleId":"201","severity":1,"message":"234","line":2,"column":10,"nodeType":"203","messageId":"204","endLine":2,"endColumn":20},{"ruleId":"201","severity":1,"message":"235","line":3,"column":10,"nodeType":"203","messageId":"204","endLine":3,"endColumn":18},{"ruleId":"201","severity":1,"message":"236","line":29,"column":12,"nodeType":"203","messageId":"204","endLine":29,"endColumn":23},{"ruleId":"201","severity":1,"message":"237","line":29,"column":25,"nodeType":"203","messageId":"204","endLine":29,"endColumn":39},{"ruleId":"209","severity":1,"message":"232","line":140,"column":8,"nodeType":"211","endLine":140,"endColumn":10,"suggestions":"254"},{"ruleId":"209","severity":1,"message":"232","line":44,"column":8,"nodeType":"211","endLine":44,"endColumn":10,"suggestions":"255"},{"ruleId":"201","severity":1,"message":"243","line":2,"column":10,"nodeType":"203","messageId":"204","endLine":2,"endColumn":17},{"ruleId":"209","severity":1,"message":"232","line":47,"column":8,"nodeType":"211","endLine":47,"endColumn":10,"suggestions":"256"},{"ruleId":"201","severity":1,"message":"239","line":1,"column":28,"nodeType":"203","messageId":"204","endLine":1,"endColumn":34},{"ruleId":"201","severity":1,"message":"246","line":1,"column":36,"nodeType":"203","messageId":"204","endLine":1,"endColumn":44},{"ruleId":"201","severity":1,"message":"247","line":2,"column":10,"nodeType":"203","messageId":"204","endLine":2,"endColumn":17},{"ruleId":"209","severity":1,"message":"248","line":79,"column":8,"nodeType":"211","endLine":79,"endColumn":19,"suggestions":"257"},"no-native-reassign",["258"],"no-negated-in-lhs",["259"],"@typescript-eslint/no-unused-vars","'Beforeunload' is defined but never used.","Identifier","unusedVar","'Board' is defined but never used.","'allWords' is assigned a value but never used.","'round' is assigned a value but never used.","'setRound' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array.","ArrayExpression",["260"],"React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array. If 'setMyId' needs the current value of 'socketRef', you can also switch to useReducer instead of useState and read 'socketRef' in the reducer.",["261"],"'myId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'idRoom' and 'socketRef'. Either include them or remove the dependency array. If 'setMyId' needs the current value of 'socketRef', you can also switch to useReducer instead of useState and read 'socketRef' in the reducer.",["262"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'actualTeam' is assigned a value but never used.","'actualPlayerId' is assigned a value but never used.","'teams' is assigned a value but never used.","'setTeams' is assigned a value but never used.","'teamPlayers' is assigned a value but never used.","'setTeamPlayers' is assigned a value but never used.","'users' is assigned a value but never used.","'setUsers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'idRoom' and 'socketRef'. Either include them or remove the dependency array.",["263"],"'ListFormat' is defined but never used.","'AdminObj' is defined but never used.","'actualRound' is assigned a value but never used.","'setActualRound' is assigned a value but never used.",["264"],"'useRef' is defined but never used.",["265"],["258"],["259"],"'RoomObj' is defined but never used.",["266"],["267"],"'useState' is defined but never used.","'TeamObj' is defined but never used.","React Hook useEffect has missing dependencies: 'drawOnCanvas' and 'socketRef'. Either include them or remove the dependency array.",["268"],["269"],["270"],["271"],["272"],["273"],["274"],["275"],["276"],"no-global-assign","no-unsafe-negation",{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"283","fix":"285"},{"desc":"283","fix":"286"},{"desc":"283","fix":"287"},{"desc":"283","fix":"288"},{"desc":"289","fix":"290"},{"desc":"277","fix":"291"},{"desc":"281","fix":"292"},{"desc":"279","fix":"293"},{"desc":"283","fix":"294"},{"desc":"283","fix":"295"},{"desc":"283","fix":"296"},{"desc":"283","fix":"297"},{"desc":"289","fix":"298"},"Update the dependencies array to be: [roomData, socketRef]",{"range":"299","text":"300"},"Update the dependencies array to be: [messages, socketRef]",{"range":"301","text":"302"},"Update the dependencies array to be: [displayAddPlayer, idRoom, socketRef]",{"range":"303","text":"304"},"Update the dependencies array to be: [idRoom, socketRef]",{"range":"305","text":"306"},{"range":"307","text":"306"},{"range":"308","text":"306"},{"range":"309","text":"306"},{"range":"310","text":"306"},"Update the dependencies array to be: [drawOnCanvas, imPlaying, socketRef]",{"range":"311","text":"312"},{"range":"313","text":"300"},{"range":"314","text":"304"},{"range":"315","text":"302"},{"range":"316","text":"306"},{"range":"317","text":"306"},{"range":"318","text":"306"},{"range":"319","text":"306"},{"range":"320","text":"312"},[2449,2459],"[roomData, socketRef]",[867,877],"[messages, socketRef]",[1505,1523],"[displayAddPlayer, idRoom, socketRef]",[2280,2282],"[idRoom, socketRef]",[4985,4987],[780,782],[1679,1681],[1546,1548],[2377,2388],"[drawOnCanvas, imPlaying, socketRef]",[2449,2459],[1505,1523],[867,877],[2280,2282],[4985,4987],[1546,1548],[1679,1681],[2377,2388]]