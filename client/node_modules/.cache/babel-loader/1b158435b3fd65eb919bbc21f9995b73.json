{"ast":null,"code":"var _jsxFileName = \"/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Board.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = ({\n  idRoom,\n  socketRef\n}) => {\n  _s();\n\n  const timeout = useRef();\n  const yourPlayingRef = useRef(false);\n  useEffect(() => {\n    socketRef.current.emit(\"ask teams\", idRoom);\n    socketRef.current.on(\"teams\", teams => {\n      teams.forEach(team => {\n        if (team.playing === true) {\n          team.players.forEach(player => {\n            if (player.playing === true) {\n              if (player.id === socketRef.current.id) {\n                yourPlayingRef.current = true;\n              }\n            }\n          });\n        }\n      });\n    });\n    socketRef.current.on(\"canvas data drawn img\", dataDrawing => {\n      console.log(dataDrawing);\n      let image = new Image();\n      let canvas = document.getElementById('board');\n      let ctx = canvas.getContext('2d');\n\n      image.onload = () => {\n        ctx.drawImage(image, 0, 0);\n      };\n\n      image.src = dataDrawing;\n    });\n\n    if (yourPlayingRef.current) {\n      drawOnCanvas();\n    } // drawOnCanvas2();\n\n  }, []); // const drawOnCanvas2 = () => {\n  //     let canvas = document.getElementById('board') as HTMLCanvasElement;        \n  //     // let sketch = document.querySelector('#sketch') as HTMLDivElement;\n  //     let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n  //     let x: number;\n  //     let y: number;\n  //     let mouseDown = false;\n  //     window.onmousedown = (e: any) => {\n  //         ctx.moveTo(x, y);\n  //         mouseDown = true;\n  //     }\n  //     window.onmouseup = (e: any) => {\n  //         mouseDown = false;\n  //     }\n  //     window.onmousemove = (e: any) => {\n  //         x = e.clientX;\n  //         y = e.clientY;\n  //         if (mouseDown) {\n  //             ctx.lineDashOffset = -100\n  //             ctx.lineTo(x ,y)\n  //             ctx.stroke()   \n  //         }\n  //     }\n  // }\n\n  const drawOnCanvas = () => {\n    let canvas = document.getElementById('board');\n    let ctx = canvas.getContext('2d');\n    let sketch = document.querySelector('#sketch');\n    let sketch_style = getComputedStyle(sketch);\n    canvas.width = parseInt(sketch_style.getPropertyValue('width'));\n    canvas.height = parseInt(sketch_style.getPropertyValue('height'));\n    let mouse = {\n      x: 0,\n      y: 0\n    };\n    let last_mouse = {\n      x: 0,\n      y: 0\n    };\n    /* Mouse Capturing Work */\n\n    canvas.addEventListener('mousemove', function (e) {\n      console.log();\n      last_mouse.x = mouse.x;\n      last_mouse.y = mouse.y;\n      mouse.x = e.pageX - this.offsetLeft;\n      mouse.y = e.pageY - this.offsetTop;\n    }, false);\n    /* Drawing on Paint App */\n\n    ctx.lineWidth = 2;\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = 'blue';\n    canvas.addEventListener('mousedown', function (e) {\n      canvas.addEventListener('mousemove', onPaint, false);\n    }, false);\n    canvas.addEventListener('mouseup', function () {\n      canvas.removeEventListener('mousemove', onPaint, false);\n    }, false);\n    let root = this;\n    let base64ImageData;\n\n    let onPaint = function () {\n      ctx.beginPath();\n      ctx.moveTo(last_mouse.x, last_mouse.y);\n      ctx.lineTo(mouse.x, mouse.y);\n      ctx.closePath();\n      ctx.stroke();\n      base64ImageData = canvas.toDataURL('image/png');\n      let drawingObj = {\n        idRoom,\n        base64ImageData\n      };\n      console.log(drawingObj.base64ImageData);\n      socketRef.current.emit(\"canvas data drawn\", drawingObj); // if (root.timeout != undefined) {\n      //     clearTimeout(root.timeout)\n      // }\n      // root.timeout = setTimeout(() => {\n      //     \n      // }, 1000)\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sketch\",\n      id: \"sketch\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"board\",\n        width: \"1080\",\n        height: \"400\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"xHe3i+JuWyom8k3+XaKMdTWE0jg=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Board.tsx"],"names":["React","useEffect","useRef","Board","idRoom","socketRef","timeout","yourPlayingRef","current","emit","on","teams","forEach","team","playing","players","player","id","dataDrawing","console","log","image","Image","canvas","document","getElementById","ctx","getContext","onload","drawImage","src","drawOnCanvas","sketch","querySelector","sketch_style","getComputedStyle","width","parseInt","getPropertyValue","height","mouse","x","y","last_mouse","addEventListener","e","pageX","offsetLeft","pageY","offsetTop","lineWidth","lineJoin","lineCap","strokeStyle","onPaint","removeEventListener","root","base64ImageData","beginPath","moveTo","lineTo","closePath","stroke","toDataURL","drawingObj"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { TeamObj } from '../Types';\n\ntype Props = {\n    idRoom: string | number\n    socketRef: React.MutableRefObject<any>\n}\n\nconst Board: React.FC<Props>  = ({ idRoom, socketRef }) => {\n\n    const timeout: React.MutableRefObject< any > = useRef()\n    const yourPlayingRef: React.MutableRefObject<boolean | undefined> = useRef(false)    \n\n    useEffect(() => {\n\n        socketRef.current.emit(\"ask teams\", idRoom);\n        socketRef.current.on(\"teams\", (teams: TeamObj []) => {            \n            teams.forEach((team) => {\n                if (team.playing === true) {                    \n                    team.players.forEach((player) => {\n                        if (player.playing === true) {\n                            if (player.id === socketRef.current.id) {                    \n                                yourPlayingRef.current = true\n                            }  \n                        }\n                    })\n                }\n            })\n        });\n\n        socketRef.current.on(\"canvas data drawn img\", (dataDrawing: any) => {                                                    \n            console.log(dataDrawing);\n            let image = new Image();\n            let canvas = document.getElementById('board') as HTMLCanvasElement;        \n\n            let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n            image.onload = () => {\n                ctx.drawImage(image, 0, 0);\n            }\n            image.src = dataDrawing\n        })\n\n        if (yourPlayingRef.current) {\n            drawOnCanvas();\n        }\n        \n\n        // drawOnCanvas2();\n        \n    }, [])\n\n    // const drawOnCanvas2 = () => {\n    //     let canvas = document.getElementById('board') as HTMLCanvasElement;        \n    //     // let sketch = document.querySelector('#sketch') as HTMLDivElement;\n    //     let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    \n        \n\n    //     let x: number;\n    //     let y: number;\n    //     let mouseDown = false;\n\n    //     window.onmousedown = (e: any) => {\n    //         ctx.moveTo(x, y);\n    //         mouseDown = true;\n    //     }\n\n    //     window.onmouseup = (e: any) => {\n    //         mouseDown = false;\n    //     }\n\n    //     window.onmousemove = (e: any) => {\n    //         x = e.clientX;\n    //         y = e.clientY;\n\n    //         if (mouseDown) {\n    //             ctx.lineDashOffset = -100\n    //             ctx.lineTo(x ,y)\n    //             ctx.stroke()   \n    //         }\n    //     }\n    // }\n\n    const drawOnCanvas = () => {\n        let canvas = document.getElementById('board') as HTMLCanvasElement;        \n\n        let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    \n        let sketch = document.querySelector('#sketch') as HTMLDivElement;\n        let sketch_style = getComputedStyle(sketch);\n        canvas.width = parseInt(sketch_style.getPropertyValue('width'));\n        canvas.height = parseInt(sketch_style.getPropertyValue('height'));\n    \n        let mouse = {x: 0, y: 0};\n        let last_mouse = {x: 0, y: 0};\n    \n        /* Mouse Capturing Work */\n        canvas.addEventListener('mousemove', function(e) {\n            console.log();\n            \n            last_mouse.x = mouse.x;\n            last_mouse.y = mouse.y;\n    \n            mouse.x = e.pageX - this.offsetLeft;\n            mouse.y = e.pageY - this.offsetTop;\n        }, false);\n    \n    \n        /* Drawing on Paint App */\n        ctx.lineWidth = 2;\n        ctx.lineJoin = 'round';\n        ctx.lineCap = 'round';\n        ctx.strokeStyle = 'blue';\n    \n        canvas.addEventListener('mousedown', function(e) {\n            canvas.addEventListener('mousemove', onPaint, false);\n        }, false);\n    \n        canvas.addEventListener('mouseup', function() {\n            canvas.removeEventListener('mousemove', onPaint, false);\n        }, false);\n\n        let root: any = this;\n        let base64ImageData;\n    \n        let onPaint = function() {\n            ctx.beginPath();\n            ctx.moveTo(last_mouse.x, last_mouse.y);\n            ctx.lineTo(mouse.x, mouse.y);\n            ctx.closePath();\n            ctx.stroke();\n\n            base64ImageData = canvas.toDataURL('image/png')\n\n            let drawingObj = {\n                idRoom,\n                base64ImageData\n            }\n\n            console.log(drawingObj.base64ImageData);\n\n            socketRef.current.emit(\"canvas data drawn\", drawingObj);\n\n            // if (root.timeout != undefined) {\n            //     clearTimeout(root.timeout)\n            // }\n\n            // root.timeout = setTimeout(() => {\n            //     \n            // }, 1000)\n        };\n    }      \n\n    return (\n        <div>\n            <div className=\"sketch\" id=\"sketch\">\n                <canvas id=\"board\" width=\"1080\" height=\"400\"></canvas>    \n            </div>\n        </div>\n    )\n}\n\nexport default Board\n"]},"metadata":{},"sourceType":"module"}