{"ast":null,"code":"var _jsxFileName = \"/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Game1.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport NextRound from './NextRound';\nimport NextTurn from './NextTurn';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Game1 = ({\n  idRoom,\n  socketRef\n}) => {\n  _s();\n\n  const yourPlayingRef = useRef(false);\n  const [displayEndTurn, setDisplayEndTurn] = useState(false);\n  const [words, setWords] = useState([]);\n  const [actualWord, setActualWord] = useState();\n  const [actualRound, setActualRound] = useState();\n  const [actualPoints, setActualPoints] = useState(0);\n  const [actualTeam, setActualTeam] = useState();\n  const [actualPlayer, setActualPlayer] = useState();\n  const [time, setTime] = useState(1);\n\n  const getRandomInteger = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  useEffect(() => {\n    socketRef.current.emit(\"ask rules\", idRoom);\n    socketRef.current.on(\"rules\", rulesData => {\n      setActualRound(rulesData.round);\n    }); // Surement Ã  modifier\n\n    socketRef.current.emit(\"ask words\", idRoom);\n    socketRef.current.on(\"words\", words => {\n      let randomNumber = getRandomInteger(0, words.round1.length - 1);\n      words.round1.forEach((word, index) => {\n        if (randomNumber === index) {\n          setActualWord(word);\n        }\n      });\n      setWords(words.round1);\n    });\n    socketRef.current.on(\"points\", points => {\n      setActualPoints(points);\n    });\n    socketRef.current.emit(\"ask teams\", idRoom);\n    socketRef.current.on(\"teams\", teams => {\n      teams.forEach(team => {\n        if (team.playing === true) {\n          setActualTeam(team.name);\n          team.players.forEach(player => {\n            if (player.playing === true) {\n              if (player.id === socketRef.current.id) {\n                yourPlayingRef.current = true;\n              }\n\n              setActualPlayer(player.pseudo);\n            }\n          });\n        }\n      });\n    });\n    socketRef.current.emit(\"ask rules\", idRoom);\n    socketRef.current.on(\"rules\", rulesData => {\n      setTime(rulesData.time); // setTimeout(() => {\n      //     clearInterval(interval)\n      // }, rulesData.time*1500)\n    });\n    setInterval(() => {\n      setTime(time => time - 1);\n    }, 1000);\n  }, []);\n\n  const goodRandomWord = () => {\n    let randomNumber = getRandomInteger(0, words.length - 1);\n    words.forEach((word, index) => {\n      if (randomNumber === index) {\n        setActualWord(word);\n        words.splice(index, 1);\n      }\n    });\n    let addPointObj = {\n      idRoom,\n      idPlayer: socketRef.current.id\n    };\n    socketRef.current.emit(\"add point\", addPointObj); // Points\n    // if (words.length === 0) {\n    //     endTurn();\n    // }\n  };\n\n  const passRandomWord = () => {\n    let randomNumber = getRandomInteger(0, words.length - 1);\n\n    do {\n      randomNumber = getRandomInteger(0, words.length - 1);\n    } while (words[randomNumber] === actualWord);\n\n    words.forEach((word, index) => {\n      if (randomNumber === index) {\n        setActualWord(word);\n      }\n    });\n  };\n\n  const endTurn = () => {\n    if (yourPlayingRef.current === true) {\n      let updatedWordsObj = {\n        idRoom,\n        words\n      };\n      socketRef.current.emit(\"update words\", updatedWordsObj);\n    }\n\n    setDisplayEndTurn(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: words.length === 0 ? /*#__PURE__*/_jsxDEV(NextRound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: displayEndTurn ? /*#__PURE__*/_jsxDEV(NextTurn, {\n        socketRef: socketRef,\n        idRoom: idRoom,\n        playerName: actualPlayer,\n        team: actualTeam,\n        points: actualPoints\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row justify-content-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [time < 1 ? endTurn() : '', \"Time: \", time]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 29\n        }, this), console.log(words.length), yourPlayingRef.current === true ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => passRandomWord(),\n            className: \"btn btn-primary col-md-2\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-times\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-light col-md-2\",\n            children: actualWord\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => goodRandomWord(),\n            className: \"btn btn-primary col-md-2\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-check\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Points: \", actualPoints]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 35\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-light\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [actualPlayer, \" de la team \", actualTeam, \" a rapport\\xE9 \", actualPoints, \" points\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 19\n    }, this)\n  }, void 0, false);\n};\n\n_s(Game1, \"lHwPX0hiPaYUoiiDbnQCFCUE2ck=\");\n\n_c = Game1;\nexport default Game1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game1\");","map":{"version":3,"sources":["/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Game1.tsx"],"names":["React","useState","useEffect","useRef","NextRound","NextTurn","Game1","idRoom","socketRef","yourPlayingRef","displayEndTurn","setDisplayEndTurn","words","setWords","actualWord","setActualWord","actualRound","setActualRound","actualPoints","setActualPoints","actualTeam","setActualTeam","actualPlayer","setActualPlayer","time","setTime","getRandomInteger","min","max","Math","floor","random","current","emit","on","rulesData","round","randomNumber","round1","length","forEach","word","index","points","teams","team","playing","name","players","player","id","pseudo","setInterval","goodRandomWord","splice","addPointObj","idPlayer","passRandomWord","endTurn","updatedWordsObj","console","log"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport { ListFormat } from 'typescript'\nimport { AdminObj, RulesObj, TeamObj, WordsObj } from '../Types'\nimport NextRound from './NextRound'\nimport NextTurn from './NextTurn'\n\ntype Props = {\n    idRoom: string | number\n    socketRef: React.MutableRefObject<any>\n}\n\nconst Game1: React.FC<Props>  = ({ idRoom, socketRef }) => {\n\n    const yourPlayingRef: React.MutableRefObject<boolean | undefined> = useRef(false)\n\n    const [displayEndTurn, setDisplayEndTurn] = useState<boolean>(false);\n\n    const [words, setWords] = useState<string []>([]);\n    const [actualWord, setActualWord] = useState<string>();\n    const [actualRound, setActualRound] = useState<number>();\n    const [actualPoints, setActualPoints] = useState<number>(0);\n\n    const [actualTeam, setActualTeam] = useState<string>()\n    const [actualPlayer, setActualPlayer] = useState<string | null | undefined>()\n\n    const [time, setTime] = useState<number>(1)\n\n    const getRandomInteger = (min: number, max: number) => {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    useEffect(() => {\n        socketRef.current.emit(\"ask rules\", idRoom)\n        socketRef.current.on(\"rules\", (rulesData: RulesObj) => {\n            setActualRound(rulesData.round)\n        }) // Surement Ã  modifier\n\n        socketRef.current.emit(\"ask words\", idRoom);\n        socketRef.current.on(\"words\", (words: WordsObj) => {\n            let randomNumber = getRandomInteger(0, words.round1.length - 1)\n\n            words.round1.forEach((word, index) => {\n                if (randomNumber === index) {\n                    setActualWord(word)\n                }\n            })\n            setWords(words.round1);\n        });\n\n        socketRef.current.on(\"points\", (points: number) => {\n            setActualPoints(points);\n        });\n\n        socketRef.current.emit(\"ask teams\", idRoom);\n        socketRef.current.on(\"teams\", (teams: TeamObj []) => {            \n            teams.forEach((team) => {\n                if (team.playing === true) {                    \n                    setActualTeam(team.name)\n                    team.players.forEach((player) => {\n                        if (player.playing === true) {\n                            if (player.id === socketRef.current.id) {                    \n                                yourPlayingRef.current = true\n                            }  \n                            setActualPlayer(player.pseudo)\n                        }\n                    })\n                }\n            })\n        });\n\n        socketRef.current.emit(\"ask rules\", idRoom)\n\n        socketRef.current.on(\"rules\", (rulesData: RulesObj) => {\n            setTime(rulesData.time)\n\n            // setTimeout(() => {\n            //     clearInterval(interval)\n            // }, rulesData.time*1500)\n        })\n\n        setInterval(() => {\n            setTime(time => time - 1)   \n        }, 1000)\n    }, [])\n\n    const goodRandomWord = () => {        \n        let randomNumber = getRandomInteger(0, words.length - 1)\n\n        words.forEach((word, index) => {\n            if (randomNumber === index) {\n                setActualWord(word)\n                words.splice(index, 1)                    \n            }\n        })        \n\n        let addPointObj = {\n            idRoom,\n            idPlayer: socketRef.current.id\n        }\n\n        socketRef.current.emit(\"add point\", addPointObj);\n        // Points\n\n        // if (words.length === 0) {\n        //     endTurn();\n        // }\n    }\n\n    const passRandomWord = () => {\n        let randomNumber = getRandomInteger(0, words.length - 1)\n        \n        do {\n            randomNumber = getRandomInteger(0, words.length - 1)\n        } while (words[randomNumber] === actualWord);\n\n        words.forEach((word, index) => {\n            if (randomNumber === index) {\n                setActualWord(word)\n            }\n        })\n    }\n\n    const endTurn = () => {\n        if (yourPlayingRef.current === true) {\n            let updatedWordsObj= {\n                idRoom,\n                words\n            }\n            \n            socketRef.current.emit(\"update words\", updatedWordsObj);\n        }\n        \n        setDisplayEndTurn(true)\n    }\n\n    return (\n        <>\n            { words.length === 0\n                ? <NextRound />\n\n                : <div>\n                    { displayEndTurn\n                        ? <NextTurn socketRef={socketRef} idRoom={idRoom} playerName={actualPlayer} team={actualTeam} points={actualPoints} />\n\n                        : <div className=\"row justify-content-center\">          \n                            {/* <Chrono socketRef={socketRef} idRoom={idRoom} setDisplayEndTurn={setDisplayEndTurn} /> */}\n\n                            <div>\n                                { time < 1\n                                    ? endTurn()\n\n                                    :''\n                                }\n                                Time: {time}\n                            </div>\n\n                            {console.log(words.length)}\n\n                            \n                \n                            { yourPlayingRef.current === true\n                                ? <div>\n                                    <button onClick={() => passRandomWord()} className=\"btn btn-primary col-md-2\">\n                                    <i className=\"fas fa-times\"></i>\n                                    </button>\n                                    <p className=\"text-light col-md-2\">{actualWord}</p>\n                                    <button onClick={() => goodRandomWord()} className=\"btn btn-primary col-md-2\">\n                                        <i className=\"fas fa-check\"></i>\n                                    </button>\n                                    <p>Points: {actualPoints}</p>\n                                </div> \n                \n                                : <div className=\"text-light\">\n                                    <p>{actualPlayer} de la team {actualTeam} a rapportÃ© {actualPoints} points</p>\n                                </div>  \n                            }                                                \n                        </div>\n                    }\n                 </div>                         \n            }\n            \n        </>\n        \n    )\n}\n\nexport default Game1\n"]},"metadata":{},"sourceType":"module"}