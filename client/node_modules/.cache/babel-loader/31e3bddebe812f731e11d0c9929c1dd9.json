{"ast":null,"code":"var _jsxFileName = \"/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Board.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = ({\n  idRoom,\n  socketRef,\n  imPlaying\n}) => {\n  _s();\n\n  useEffect(() => {\n    socketRef.current.on(\"board erased\", bool => {\n      let canvas = document.getElementById('board');\n      let ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, 0, 0);\n      ctx.lineWidth = 4;\n      canvas.height = 400;\n    });\n\n    if (imPlaying === true) {\n      drawOnCanvas();\n    } else {\n      socketRef.current.on(\"canvas data drawn img\", dataDrawing => {\n        let canvas = document.getElementById('board');\n        let ctx = canvas.getContext('2d');\n        ctx.beginPath();\n        ctx.moveTo(dataDrawing.last_mouse.x, dataDrawing.last_mouse.y);\n        ctx.lineTo(dataDrawing.mouse.x, dataDrawing.mouse.y);\n        ctx.closePath();\n        ctx.stroke(); // let image = new Image();\n        // let canvas = document.getElementById('board') as HTMLCanvasElement;        \n        // let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n        // image.onload = () => {\n        //     ctx.drawImage(image, 0, 0);\n        // }\n        // image.src = dataDrawing\n      });\n    }\n  }, [imPlaying]);\n\n  const drawOnCanvas = () => {\n    let canvas = document.getElementById('board');\n    let ctx = canvas.getContext('2d'); // let sketch = document.querySelector('#sketch') as HTMLDivElement;\n    // let sketch_style = getComputedStyle(sketch);\n\n    canvas.width = parseInt(getComputedStyle(canvas).getPropertyValue('width'));\n    canvas.height = parseInt(getComputedStyle(canvas).getPropertyValue('height'));\n    console.log(canvas.width);\n    console.log(canvas.height);\n    let mouse = {\n      x: 0,\n      y: 0\n    };\n    let last_mouse = {\n      x: 0,\n      y: 0\n    };\n    /* Mouse Capturing Work */\n\n    canvas.addEventListener('mousemove', function (e) {\n      last_mouse.x = mouse.x;\n      last_mouse.y = mouse.y;\n      mouse.x = e.pageX - this.offsetLeft;\n      mouse.y = e.pageY - this.offsetTop;\n    }, false);\n    /* Drawing on Paint App */\n\n    ctx.lineWidth = 4;\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = 'black';\n    canvas.addEventListener('mousedown', function (e) {\n      canvas.addEventListener('mousemove', onPaint, false);\n    }, false);\n    canvas.addEventListener('mouseup', function () {\n      canvas.removeEventListener('mousemove', onPaint, false);\n    }, false);\n\n    let onPaint = function () {\n      ctx.beginPath();\n      ctx.moveTo(last_mouse.x, last_mouse.y);\n      ctx.lineTo(mouse.x, mouse.y);\n      ctx.closePath();\n      ctx.stroke();\n      let drawingObj = {\n        idRoom,\n        last_mouse,\n        mouse\n      };\n      socketRef.current.emit(\"canvas data drawn\", drawingObj);\n    };\n  };\n\n  const changePenWidth = e => {\n    let newLineWidth = parseFloat(e.currentTarget.getAttribute('class'));\n    let allPenWidth = document.querySelectorAll('.pen-width li');\n    console.log(allPenWidth);\n    allPenWidth.forEach(penWidth => {\n      if (penWidth === e.currentTarget) {\n        penWidth.classList.add('picked');\n      } else {\n        penWidth.classList.remove('picked');\n      }\n    });\n    let canvas = document.getElementById('board');\n    let ctx = canvas.getContext('2d');\n    ctx.strokeStyle = 'black';\n    ctx.lineWidth = newLineWidth;\n  };\n\n  const changePenColor = e => {\n    let newLineColor = e.currentTarget.value;\n    let canvas = document.getElementById('board');\n    let ctx = canvas.getContext('2d');\n    ctx.strokeStyle = newLineColor;\n  };\n\n  const changePenToEraser = () => {\n    let canvas = document.getElementById('board');\n    let ctx = canvas.getContext('2d');\n    ctx.strokeStyle = 'white';\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => changePenColor(e),\n      className: \"color-brush\",\n      type: \"color\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => changePenToEraser(),\n      className: \"eraser\",\n      children: \"GOMME\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"pen-width\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"2\",\n        onClick: e => changePenWidth(e),\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 72\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"4 picked\",\n        onClick: e => changePenWidth(e),\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 79\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"10\",\n        onClick: e => changePenWidth(e),\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 73\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"15\",\n        onClick: e => changePenWidth(e),\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 73\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"30\",\n        onClick: e => changePenWidth(e),\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 73\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"draw\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sketch\",\n        id: \"sketch\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"board\",\n          width: \"600\",\n          height: \"400\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Board.tsx"],"names":["React","useEffect","Board","idRoom","socketRef","imPlaying","current","on","bool","canvas","document","getElementById","ctx","getContext","clearRect","lineWidth","height","drawOnCanvas","dataDrawing","beginPath","moveTo","last_mouse","x","y","lineTo","mouse","closePath","stroke","width","parseInt","getComputedStyle","getPropertyValue","console","log","addEventListener","e","pageX","offsetLeft","pageY","offsetTop","lineJoin","lineCap","strokeStyle","onPaint","removeEventListener","drawingObj","emit","changePenWidth","newLineWidth","parseFloat","currentTarget","getAttribute","allPenWidth","querySelectorAll","forEach","penWidth","classList","add","remove","changePenColor","newLineColor","value","changePenToEraser"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { TeamObj } from '../Types';\n\ntype Props = {\n    idRoom: string | number\n    socketRef: React.MutableRefObject<any>\n    imPlaying: boolean | undefined\n}\n\nconst Board: React.FC<Props>  = ({ idRoom, socketRef, imPlaying }) => {  \n    \n    useEffect(() => {\n        socketRef.current.on(\"board erased\", (bool: boolean) => {\n            let canvas = document.getElementById('board') as HTMLCanvasElement;        \n    \n            let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;            \n            \n            ctx.clearRect(0, 0, 0, 0)\n            \n            ctx.lineWidth = 4;\n\n            canvas.height = 400\n        })\n        \n        if (imPlaying === true) {\n            drawOnCanvas();\n        } else {\n            socketRef.current.on(\"canvas data drawn img\", (dataDrawing: any) => {                                                        \n                let canvas = document.getElementById('board') as HTMLCanvasElement;        \n    \n                let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n                ctx.beginPath();\n                ctx.moveTo(dataDrawing.last_mouse.x, dataDrawing.last_mouse.y);\n                ctx.lineTo(dataDrawing.mouse.x, dataDrawing.mouse.y);\n                ctx.closePath();\n                ctx.stroke();\n    \n                // let image = new Image();\n                // let canvas = document.getElementById('board') as HTMLCanvasElement;        \n    \n                // let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    \n                // image.onload = () => {\n                //     ctx.drawImage(image, 0, 0);\n                // }\n                // image.src = dataDrawing\n            })\n        }\n        \n    }, [imPlaying])\n\n    const drawOnCanvas = () => {\n        \n        let canvas = document.getElementById('board') as HTMLCanvasElement;        \n        \n        let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    \n        // let sketch = document.querySelector('#sketch') as HTMLDivElement;\n        // let sketch_style = getComputedStyle(sketch);\n        canvas.width = parseInt(getComputedStyle(canvas).getPropertyValue('width'));\n        canvas.height = parseInt(getComputedStyle(canvas).getPropertyValue('height'));\n\n        console.log(canvas.width);\n        console.log(canvas.height);\n        \n    \n        let mouse = {x: 0, y: 0};\n        let last_mouse = {x: 0, y: 0};\n    \n        /* Mouse Capturing Work */\n        canvas.addEventListener('mousemove', function(e) {\n            \n            last_mouse.x = mouse.x;\n            last_mouse.y = mouse.y;\n    \n            mouse.x = e.pageX - this.offsetLeft;\n            mouse.y = e.pageY - this.offsetTop;\n        }, false);\n    \n    \n        /* Drawing on Paint App */\n        ctx.lineWidth = 4;\n        ctx.lineJoin = 'round';\n        ctx.lineCap = 'round';\n        ctx.strokeStyle = 'black';\n    \n        canvas.addEventListener('mousedown', function(e) {\n            canvas.addEventListener('mousemove', onPaint, false);\n        }, false);\n    \n        canvas.addEventListener('mouseup', function() {\n            canvas.removeEventListener('mousemove', onPaint, false);\n        }, false);\n\n        let onPaint = function() {                                       \n            ctx.beginPath();\n            ctx.moveTo(last_mouse.x, last_mouse.y);\n            ctx.lineTo(mouse.x, mouse.y);\n            ctx.closePath();\n            ctx.stroke();\n\n            let drawingObj = {\n                idRoom,\n                last_mouse,\n                mouse\n            }\n\n            socketRef.current.emit(\"canvas data drawn\", drawingObj);\n        };\n    }     \n    \n    const changePenWidth = (e: any) => {\n        let newLineWidth = parseFloat(e.currentTarget.getAttribute('class'))        \n\n        let allPenWidth = document.querySelectorAll('.pen-width li');\n        console.log(allPenWidth);\n\n        allPenWidth.forEach((penWidth) => {\n            if (penWidth === e.currentTarget) {                \n                penWidth.classList.add('picked')   \n            } else {\n                penWidth.classList.remove('picked')       \n            }\n        })\n        \n        let canvas = document.getElementById('board') as HTMLCanvasElement;        \n\n        let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n\n        ctx.strokeStyle = 'black';\n        ctx.lineWidth = newLineWidth;\n    }\n\n    const changePenColor = (e: any) => {\n        let newLineColor = e.currentTarget.value\n        \n        let canvas = document.getElementById('board') as HTMLCanvasElement;        \n\n        let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n        ctx.strokeStyle = newLineColor;\n    }\n\n    const changePenToEraser = () => {        \n        let canvas = document.getElementById('board') as HTMLCanvasElement;        \n\n        let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n        ctx.strokeStyle = 'white';\n    }\n\n    return (\n        <div>\n            <input onChange={(e) => changePenColor(e)} className=\"color-brush\" type=\"color\"/>\n            <div onClick={() => changePenToEraser()} className=\"eraser\">GOMME</div>\n            <ul className=\"pen-width\">\n                <li className=\"2\" onClick={(e) => changePenWidth(e)} > <span></span> </li>\n                <li className=\"4 picked\" onClick={(e) => changePenWidth(e)} > <span></span> </li>\n                <li className=\"10\" onClick={(e) => changePenWidth(e)} > <span></span> </li>\n                <li className=\"15\" onClick={(e) => changePenWidth(e)} > <span></span> </li>\n                <li className=\"30\" onClick={(e) => changePenWidth(e)} > <span></span> </li>\n            </ul>\n            <section id=\"draw\">\n                <div className=\"sketch\" id=\"sketch\">\n                    <canvas id=\"board\" width=\"600\" height=\"400\"></canvas>    \n                </div>\n            </section>\n            \n        </div>\n    )\n}\n\nexport default Board\n"]},"metadata":{},"sourceType":"module"}