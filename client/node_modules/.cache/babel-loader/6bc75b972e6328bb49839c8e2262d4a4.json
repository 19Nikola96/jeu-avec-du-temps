{"ast":null,"code":"var _jsxFileName = \"/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Game1.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport NextRound from './NextRound';\nimport NextTurn from './NextTurn';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Game1 = ({\n  idRoom,\n  socketRef\n}) => {\n  _s();\n\n  const yourPlayingRef = useRef(false);\n  const [displayEndTurn, setDisplayEndTurn] = useState(false);\n  const [displayNextRound, setDisplayNextRound] = useState(false);\n  const [round, setRound] = useState(0);\n  const [words, setWords] = useState([]);\n  const [actualWord, setActualWord] = useState();\n  const [actualRound, setActualRound] = useState();\n  const [actualPoints, setActualPoints] = useState(0);\n  const [actualTeam, setActualTeam] = useState();\n  const [actualPlayer, setActualPlayer] = useState();\n  const [time, setTime] = useState(1);\n\n  const getRandomInteger = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  useEffect(() => {\n    // socketRef.current.emit(\"ask rules\", idRoom)\n    // socketRef.current.on(\"rules\", (rulesData: RulesObj) => {\n    //     setActualRound(rulesData.round)\n    // }) // Surement Ã  modifier\n    socketRef.current.emit(\"ask words\", idRoom);\n    socketRef.current.on(\"words\", words => {\n      let randomNumber = getRandomInteger(0, words.round1.length - 1);\n      console.log(words);\n      words.round1.forEach((word, index) => {\n        if (randomNumber === index) {\n          setActualWord(word);\n        }\n      });\n      setWords(words.round1);\n    });\n    socketRef.current.on(\"points\", points => {\n      setActualPoints(points);\n    });\n    socketRef.current.emit(\"ask teams\", idRoom);\n    socketRef.current.on(\"teams\", teams => {\n      teams.forEach(team => {\n        if (team.playing === true) {\n          setActualTeam(team.name);\n          team.players.forEach(player => {\n            if (player.playing === true) {\n              if (player.id === socketRef.current.id) {\n                yourPlayingRef.current = true;\n              }\n\n              setActualPlayer(player.pseudo);\n            }\n          });\n        }\n      });\n    });\n    socketRef.current.emit(\"ask rules\", idRoom);\n    socketRef.current.on(\"rules\", rulesData => {\n      setTime(rulesData.time);\n      setRound(rulesData.round); // setTimeout(() => {\n      //     clearInterval(interval)\n      // }, rulesData.time*1500)\n    });\n    socketRef.current.on(\"display next round\", displayBool => {\n      setDisplayNextRound(displayBool);\n    });\n    setInterval(() => {\n      setTime(time => time - 1);\n    }, 1000);\n  }, []);\n\n  const goodRandomWord = () => {\n    let randomNumber = getRandomInteger(0, words.length - 1);\n    words.forEach((word, index) => {\n      if (randomNumber === index) {\n        setActualWord(word);\n        words.splice(index, 1);\n      }\n    });\n    let addPointObj = {\n      idRoom,\n      idPlayer: socketRef.current.id\n    };\n    socketRef.current.emit(\"add point\", addPointObj); // Points\n\n    if (words.length === 0) {\n      nextRound();\n    }\n  };\n\n  const nextRound = () => {\n    setDisplayNextRound(true);\n    console.log('next round launched');\n    socketRef.current.emit(\"next round\", idRoom);\n  };\n\n  const passRandomWord = () => {\n    let randomNumber = getRandomInteger(0, words.length - 1);\n\n    do {\n      randomNumber = getRandomInteger(0, words.length - 1);\n    } while (words[randomNumber] === actualWord);\n\n    words.forEach((word, index) => {\n      if (randomNumber === index) {\n        setActualWord(word);\n      }\n    });\n  };\n\n  const endTurn = () => {\n    if (yourPlayingRef.current === true) {\n      let updatedWordsObj = {\n        idRoom,\n        words\n      };\n      socketRef.current.emit(\"update words\", updatedWordsObj);\n    }\n\n    setDisplayEndTurn(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: displayNextRound ? /*#__PURE__*/_jsxDEV(NextRound, {\n      socketRef: socketRef,\n      idRoom: idRoom,\n      playerName: actualPlayer,\n      team: actualTeam,\n      points: actualPoints\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: displayEndTurn ? /*#__PURE__*/_jsxDEV(NextTurn, {\n        socketRef: socketRef,\n        idRoom: idRoom,\n        playerName: actualPlayer,\n        team: actualTeam,\n        points: actualPoints\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row justify-content-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Phase \", round + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [time < 1 ? endTurn() : '', \"Time: \", time]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 29\n        }, this), yourPlayingRef.current === true ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => passRandomWord(),\n            className: \"btn btn-primary col-md-2\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-times\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-light col-md-2\",\n            children: actualWord\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => goodRandomWord(),\n            className: \"btn btn-primary col-md-2\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-check\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Points: \", actualPoints]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 35\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-light\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [actualPlayer, \" de la team \", actualTeam, \" a rapport\\xE9 \", actualPoints, \" points\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 19\n    }, this)\n  }, void 0, false);\n};\n\n_s(Game1, \"3UX1MsWdxc+h3NhKpTyemugOzxQ=\");\n\n_c = Game1;\nexport default Game1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game1\");","map":{"version":3,"sources":["/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Game1.tsx"],"names":["React","useState","useEffect","useRef","NextRound","NextTurn","Game1","idRoom","socketRef","yourPlayingRef","displayEndTurn","setDisplayEndTurn","displayNextRound","setDisplayNextRound","round","setRound","words","setWords","actualWord","setActualWord","actualRound","setActualRound","actualPoints","setActualPoints","actualTeam","setActualTeam","actualPlayer","setActualPlayer","time","setTime","getRandomInteger","min","max","Math","floor","random","current","emit","on","randomNumber","round1","length","console","log","forEach","word","index","points","teams","team","playing","name","players","player","id","pseudo","rulesData","displayBool","setInterval","goodRandomWord","splice","addPointObj","idPlayer","nextRound","passRandomWord","endTurn","updatedWordsObj"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport { ListFormat } from 'typescript'\nimport { AdminObj, RulesObj, TeamObj, WordsObj } from '../Types'\nimport NextRound from './NextRound'\nimport NextTurn from './NextTurn'\n\ntype Props = {\n    idRoom: string | number\n    socketRef: React.MutableRefObject<any>\n}\n\nconst Game1: React.FC<Props>  = ({ idRoom, socketRef }) => {\n\n    const yourPlayingRef: React.MutableRefObject<boolean | undefined> = useRef(false)\n\n    const [displayEndTurn, setDisplayEndTurn] = useState<boolean>(false);\n    const [displayNextRound, setDisplayNextRound] = useState<boolean>(false);\n\n    const [round, setRound] = useState<number>(0);\n\n    const [words, setWords] = useState<string []>([]);\n    const [actualWord, setActualWord] = useState<string>();\n    const [actualRound, setActualRound] = useState<number>();\n    const [actualPoints, setActualPoints] = useState<number>(0);\n\n    const [actualTeam, setActualTeam] = useState<string>()\n    const [actualPlayer, setActualPlayer] = useState<string | null | undefined>()\n\n    const [time, setTime] = useState<number>(1)\n\n    const getRandomInteger = (min: number, max: number) => {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    useEffect(() => {\n        // socketRef.current.emit(\"ask rules\", idRoom)\n        // socketRef.current.on(\"rules\", (rulesData: RulesObj) => {\n        //     setActualRound(rulesData.round)\n        // }) // Surement Ã  modifier\n\n        socketRef.current.emit(\"ask words\", idRoom);\n        socketRef.current.on(\"words\", (words: WordsObj) => {\n            let randomNumber = getRandomInteger(0, words.round1.length - 1)\n\n            console.log(words);\n            \n\n            words.round1.forEach((word, index) => {\n                if (randomNumber === index) {\n                    setActualWord(word)\n                }\n            })\n            setWords(words.round1);\n        });\n\n        socketRef.current.on(\"points\", (points: number) => {\n            setActualPoints(points);\n        });\n\n        socketRef.current.emit(\"ask teams\", idRoom);\n        socketRef.current.on(\"teams\", (teams: TeamObj []) => {            \n            teams.forEach((team) => {\n                if (team.playing === true) {                    \n                    setActualTeam(team.name)\n                    team.players.forEach((player) => {\n                        if (player.playing === true) {\n                            if (player.id === socketRef.current.id) {                    \n                                yourPlayingRef.current = true\n                            }  \n                            setActualPlayer(player.pseudo)\n                        }\n                    })\n                }\n            })\n        });\n\n        socketRef.current.emit(\"ask rules\", idRoom)\n\n        socketRef.current.on(\"rules\", (rulesData: RulesObj) => {\n            setTime(rulesData.time)\n\n            setRound(rulesData.round)\n\n            // setTimeout(() => {\n            //     clearInterval(interval)\n            // }, rulesData.time*1500)\n        })\n\n        socketRef.current.on(\"display next round\", (displayBool: boolean) => {\n            setDisplayNextRound(displayBool);\n        })\n\n        setInterval(() => {\n            setTime(time => time - 1)   \n        }, 1000)\n    }, [])\n\n    const goodRandomWord = () => {        \n        let randomNumber = getRandomInteger(0, words.length - 1)\n\n        words.forEach((word, index) => {\n            if (randomNumber === index) {\n                setActualWord(word)\n                words.splice(index, 1)                    \n            }\n        })        \n\n        let addPointObj = {\n            idRoom,\n            idPlayer: socketRef.current.id\n        }\n\n        socketRef.current.emit(\"add point\", addPointObj);\n        // Points\n\n        if (words.length === 0) {\n            nextRound();\n        }\n    }\n\n    const nextRound = () => {\n        setDisplayNextRound(true)\n        console.log('next round launched');\n        \n        socketRef.current.emit(\"next round\", idRoom);\n    }\n\n    const passRandomWord = () => {\n        let randomNumber = getRandomInteger(0, words.length - 1)\n        \n        do {\n            randomNumber = getRandomInteger(0, words.length - 1)\n        } while (words[randomNumber] === actualWord);\n\n        words.forEach((word, index) => {\n            if (randomNumber === index) {\n                setActualWord(word)\n            }\n        })\n    }\n\n    const endTurn = () => {\n        if (yourPlayingRef.current === true) {\n            let updatedWordsObj= {\n                idRoom,\n                words\n            }\n            \n            socketRef.current.emit(\"update words\", updatedWordsObj);\n        }\n        \n        setDisplayEndTurn(true)\n    }\n\n    return (\n        <>\n            { displayNextRound\n                ? <NextRound socketRef={socketRef} idRoom={idRoom} playerName={actualPlayer} team={actualTeam} points={actualPoints} />\n\n                : <div>\n                    { displayEndTurn\n                        ? <NextTurn socketRef={socketRef} idRoom={idRoom} playerName={actualPlayer} team={actualTeam} points={actualPoints} />\n\n                        : <div className=\"row justify-content-center\">          \n                            {/* <Chrono socketRef={socketRef} idRoom={idRoom} setDisplayEndTurn={setDisplayEndTurn} /> */}\n                                <h2>Phase { round + 1 }</h2>\n                            <div>\n                                { time < 1\n                                    ? endTurn()\n\n                                    :''\n                                }\n                                Time: {time}\n                            </div>                        \n                \n                            { yourPlayingRef.current === true\n                                ? <div>\n                                    <button onClick={() => passRandomWord()} className=\"btn btn-primary col-md-2\">\n                                    <i className=\"fas fa-times\"></i>\n                                    </button>\n                                    <p className=\"text-light col-md-2\">{actualWord}</p>\n                                    <button onClick={() => goodRandomWord()} className=\"btn btn-primary col-md-2\">\n                                        <i className=\"fas fa-check\"></i>\n                                    </button>\n                                    <p>Points: {actualPoints}</p>\n                                </div> \n                \n                                : <div className=\"text-light\">\n                                    <p>{actualPlayer} de la team {actualTeam} a rapportÃ© {actualPoints} points</p>\n                                </div>  \n                            }                                                \n                        </div>\n                    }\n                 </div>                         \n            }\n            \n        </>\n        \n    )\n}\n\nexport default Game1\n"]},"metadata":{},"sourceType":"module"}