{"ast":null,"code":"var _jsxFileName = \"/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Board.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = ({\n  idRoom,\n  socketRef,\n  playing\n}) => {\n  _s();\n\n  useEffect(() => {\n    socketRef.current.emit(\"ask teams\", idRoom);\n    socketRef.current.on(\"teams\", teams => {\n      teams.forEach(team => {\n        if (team.playing === true) {\n          team.players.forEach(player => {\n            if (player.playing === true) {\n              if (player.id === socketRef.current.id) {\n                drawOnCanvas();\n              } else {\n                socketRef.current.on(\"canvas data drawn img\", dataDrawing => {\n                  console.log(dataDrawing);\n                  let canvas = document.getElementById('board');\n                  let ctx = canvas.getContext('2d');\n                  ctx.beginPath();\n                  ctx.moveTo(dataDrawing.last_mouse.x, dataDrawing.last_mouse.y);\n                  ctx.lineTo(dataDrawing.mouse.x, dataDrawing.mouse.y);\n                  ctx.closePath();\n                  ctx.stroke(); // let image = new Image();\n                  // let canvas = document.getElementById('board') as HTMLCanvasElement;        \n                  // let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n                  // image.onload = () => {\n                  //     ctx.drawImage(image, 0, 0);\n                  // }\n                  // image.src = dataDrawing\n                });\n              }\n            }\n          });\n        }\n      });\n    }); // drawOnCanvas2();\n  }, []); // const drawOnCanvas2 = () => {\n  //     let canvas = document.getElementById('board') as HTMLCanvasElement;        \n  //     // let sketch = document.querySelector('#sketch') as HTMLDivElement;\n  //     let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n  //     let x: number;\n  //     let y: number;\n  //     let mouseDown = false;\n  //     window.onmousedown = (e: any) => {\n  //         ctx.moveTo(x, y);\n  //         mouseDown = true;\n  //     }\n  //     window.onmouseup = (e: any) => {\n  //         mouseDown = false;\n  //     }\n  //     window.onmousemove = (e: any) => {\n  //         x = e.clientX;\n  //         y = e.clientY;\n  //         if (mouseDown) {\n  //             ctx.lineDashOffset = -100\n  //             ctx.lineTo(x ,y)\n  //             ctx.stroke()   \n  //         }\n  //     }\n  // }\n\n  const drawOnCanvas = () => {\n    let canvas = document.getElementById('board');\n    let ctx = canvas.getContext('2d');\n    let sketch = document.querySelector('#sketch');\n    let sketch_style = getComputedStyle(sketch);\n    canvas.width = parseInt(sketch_style.getPropertyValue('width'));\n    canvas.height = parseInt(sketch_style.getPropertyValue('height'));\n    let mouse = {\n      x: 0,\n      y: 0\n    };\n    let last_mouse = {\n      x: 0,\n      y: 0\n    };\n    /* Mouse Capturing Work */\n\n    canvas.addEventListener('mousemove', function (e) {\n      console.log();\n      last_mouse.x = mouse.x;\n      last_mouse.y = mouse.y;\n      mouse.x = e.pageX - this.offsetLeft;\n      mouse.y = e.pageY - this.offsetTop;\n    }, false);\n    /* Drawing on Paint App */\n\n    ctx.lineWidth = 2;\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = 'blue';\n    canvas.addEventListener('mousedown', function (e) {\n      canvas.addEventListener('mousemove', onPaint, false);\n    }, false);\n    canvas.addEventListener('mouseup', function () {\n      canvas.removeEventListener('mousemove', onPaint, false);\n    }, false);\n    let root = this;\n    let base64ImageData;\n\n    let onPaint = function () {\n      ctx.beginPath();\n      ctx.moveTo(last_mouse.x, last_mouse.y);\n      ctx.lineTo(mouse.x, mouse.y);\n      ctx.closePath();\n      ctx.stroke();\n      base64ImageData = canvas.toDataURL('image/png');\n      let drawingObj = {\n        idRoom,\n        last_mouse,\n        mouse\n      };\n      socketRef.current.emit(\"canvas data drawn\", drawingObj); // if (root.timeout != undefined) {\n      //     clearTimeout(root.timeout)\n      // }\n      // root.timeout = setTimeout(() => {\n      //     \n      // }, 1000)\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sketch\",\n      id: \"sketch\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"board\",\n        width: \"1080\",\n        height: \"400\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Board.tsx"],"names":["React","useEffect","Board","idRoom","socketRef","playing","current","emit","on","teams","forEach","team","players","player","id","drawOnCanvas","dataDrawing","console","log","canvas","document","getElementById","ctx","getContext","beginPath","moveTo","last_mouse","x","y","lineTo","mouse","closePath","stroke","sketch","querySelector","sketch_style","getComputedStyle","width","parseInt","getPropertyValue","height","addEventListener","e","pageX","offsetLeft","pageY","offsetTop","lineWidth","lineJoin","lineCap","strokeStyle","onPaint","removeEventListener","root","base64ImageData","toDataURL","drawingObj"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { TeamObj } from '../Types';\n\ntype Props = {\n    idRoom: string | number\n    socketRef: React.MutableRefObject<any>\n    playing: boolean | undefined\n}\n\nconst Board: React.FC<Props>  = ({ idRoom, socketRef, playing }) => {    \n\n    useEffect(() => {\n\n        socketRef.current.emit(\"ask teams\", idRoom);\n        socketRef.current.on(\"teams\", (teams: TeamObj []) => {            \n            teams.forEach((team) => {\n                if (team.playing === true) {                    \n                    team.players.forEach((player) => {\n                        if (player.playing === true) {\n                            if (player.id === socketRef.current.id) {                    \n                                drawOnCanvas();\n                            } else {\n                                socketRef.current.on(\"canvas data drawn img\", (dataDrawing: any) => {                                                    \n                                    console.log(dataDrawing);\n\n                                    let canvas = document.getElementById('board') as HTMLCanvasElement;        \n\n                                    let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n                                    ctx.beginPath();\n                                    ctx.moveTo(dataDrawing.last_mouse.x, dataDrawing.last_mouse.y);\n                                    ctx.lineTo(dataDrawing.mouse.x, dataDrawing.mouse.y);\n                                    ctx.closePath();\n                                    ctx.stroke();\n\n                                    // let image = new Image();\n                                    // let canvas = document.getElementById('board') as HTMLCanvasElement;        \n                        \n                                    // let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n                        \n                                    // image.onload = () => {\n                                    //     ctx.drawImage(image, 0, 0);\n                                    // }\n                                    // image.src = dataDrawing\n                                })\n                            }\n                        }\n                    })\n                }\n            })\n        });        \n\n        // drawOnCanvas2();\n        \n    }, [])\n\n    // const drawOnCanvas2 = () => {\n    //     let canvas = document.getElementById('board') as HTMLCanvasElement;        \n    //     // let sketch = document.querySelector('#sketch') as HTMLDivElement;\n    //     let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    \n        \n\n    //     let x: number;\n    //     let y: number;\n    //     let mouseDown = false;\n\n    //     window.onmousedown = (e: any) => {\n    //         ctx.moveTo(x, y);\n    //         mouseDown = true;\n    //     }\n\n    //     window.onmouseup = (e: any) => {\n    //         mouseDown = false;\n    //     }\n\n    //     window.onmousemove = (e: any) => {\n    //         x = e.clientX;\n    //         y = e.clientY;\n\n    //         if (mouseDown) {\n    //             ctx.lineDashOffset = -100\n    //             ctx.lineTo(x ,y)\n    //             ctx.stroke()   \n    //         }\n    //     }\n    // }\n\n    const drawOnCanvas = () => {\n        let canvas = document.getElementById('board') as HTMLCanvasElement;        \n\n        let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    \n        let sketch = document.querySelector('#sketch') as HTMLDivElement;\n        let sketch_style = getComputedStyle(sketch);\n        canvas.width = parseInt(sketch_style.getPropertyValue('width'));\n        canvas.height = parseInt(sketch_style.getPropertyValue('height'));\n    \n        let mouse = {x: 0, y: 0};\n        let last_mouse = {x: 0, y: 0};\n    \n        /* Mouse Capturing Work */\n        canvas.addEventListener('mousemove', function(e) {\n            console.log();\n            \n            last_mouse.x = mouse.x;\n            last_mouse.y = mouse.y;\n    \n            mouse.x = e.pageX - this.offsetLeft;\n            mouse.y = e.pageY - this.offsetTop;\n        }, false);\n    \n    \n        /* Drawing on Paint App */\n        ctx.lineWidth = 2;\n        ctx.lineJoin = 'round';\n        ctx.lineCap = 'round';\n        ctx.strokeStyle = 'blue';\n    \n        canvas.addEventListener('mousedown', function(e) {\n            canvas.addEventListener('mousemove', onPaint, false);\n        }, false);\n    \n        canvas.addEventListener('mouseup', function() {\n            canvas.removeEventListener('mousemove', onPaint, false);\n        }, false);\n\n        let root: any = this;\n        let base64ImageData;\n    \n        let onPaint = function() {\n            ctx.beginPath();\n            ctx.moveTo(last_mouse.x, last_mouse.y);\n            ctx.lineTo(mouse.x, mouse.y);\n            ctx.closePath();\n            ctx.stroke();\n\n\n\n            base64ImageData = canvas.toDataURL('image/png')\n\n            let drawingObj = {\n                idRoom,\n                last_mouse,\n                mouse\n            }\n\n            socketRef.current.emit(\"canvas data drawn\", drawingObj);\n\n            // if (root.timeout != undefined) {\n            //     clearTimeout(root.timeout)\n            // }\n\n            // root.timeout = setTimeout(() => {\n            //     \n            // }, 1000)\n        };\n    }      \n\n    return (\n        <div>\n            <div className=\"sketch\" id=\"sketch\">\n                <canvas id=\"board\" width=\"1080\" height=\"400\"></canvas>    \n            </div>\n        </div>\n    )\n}\n\nexport default Board\n"]},"metadata":{},"sourceType":"module"}