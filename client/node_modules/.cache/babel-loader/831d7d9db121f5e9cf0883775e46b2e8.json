{"ast":null,"code":"var _jsxFileName = \"/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Game1.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport NextRound from './NextRound';\nimport NextTurn from './NextTurn';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Game1 = ({\n  idRoom,\n  socketRef\n}) => {\n  _s();\n\n  const yourPlayingRef = useRef(false);\n  const thisRound = useRef(0);\n  const [displayEndTurn, setDisplayEndTurn] = useState(false);\n  const [displayNextRound, setDisplayNextRound] = useState(false);\n  const [round, setRound] = useState(0);\n  const [words, setWords] = useState([]);\n  const [actualWord, setActualWord] = useState();\n  const [actualRound, setActualRound] = useState();\n  const [actualPoints, setActualPoints] = useState(0);\n  const [actualTeam, setActualTeam] = useState();\n  const [actualPlayer, setActualPlayer] = useState();\n  const [time, setTime] = useState(1);\n\n  const getRandomInteger = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  useEffect(() => {\n    // socketRef.current.emit(\"ask rules\", idRoom)\n    // socketRef.current.on(\"rules\", (rulesData: RulesObj) => {\n    //     setActualRound(rulesData.round)\n    // }) // Surement Ã  modifier\n    socketRef.current.emit(\"ask rules\", idRoom);\n    socketRef.current.on(\"rules\", rulesData => {\n      setTime(rulesData.time);\n      setRound(rulesData.round);\n      thisRound.current = rulesData.round; // setTimeout(() => {\n      //     clearInterval(interval)\n      // }, rulesData.time*1500)\n    });\n    socketRef.current.emit(\"ask words\", idRoom);\n    socketRef.current.on(\"words\", words => {\n      let randomNumber;\n\n      if (thisRound.current === 0) {\n        randomNumber = getRandomInteger(0, words.round1.length - 1);\n      } else if (thisRound.current === 1) {\n        randomNumber = getRandomInteger(0, words.round2.length - 1);\n      } else {\n        randomNumber = getRandomInteger(0, words.round3.length - 1);\n      }\n\n      console.log(words);\n      console.log(round);\n\n      if (thisRound.current === 0) {\n        words.round1.forEach((word, index) => {\n          if (randomNumber === index) {\n            setActualWord(word);\n          }\n        });\n        setWords(words.round1);\n      } else if (thisRound.current === 1) {\n        words.round2.forEach((word, index) => {\n          if (randomNumber === index) {\n            setActualWord(word);\n          }\n        });\n        setWords(words.round2);\n      } else {\n        words.round3.forEach((word, index) => {\n          if (randomNumber === index) {\n            setActualWord(word);\n          }\n        });\n        setWords(words.round3);\n      }\n    });\n    socketRef.current.on(\"points\", points => {\n      setActualPoints(points);\n    });\n    socketRef.current.emit(\"ask teams\", idRoom);\n    socketRef.current.on(\"teams\", teams => {\n      teams.forEach(team => {\n        if (team.playing === true) {\n          setActualTeam(team.name);\n          team.players.forEach(player => {\n            if (player.playing === true) {\n              if (player.id === socketRef.current.id) {\n                yourPlayingRef.current = true;\n              }\n\n              setActualPlayer(player.pseudo);\n            }\n          });\n        }\n      });\n    });\n    socketRef.current.on(\"display next round\", displayBool => {\n      setDisplayNextRound(displayBool);\n    });\n    setInterval(() => {\n      setTime(time => time - 1);\n    }, 1000);\n  }, []);\n\n  const goodRandomWord = theWord => {\n    let randomNumber = getRandomInteger(0, words.length - 1);\n    words.forEach((word, index) => {\n      if (randomNumber === index) {\n        setActualWord(word);\n        words.splice(index, 1);\n      }\n    });\n    let addPointObj = {\n      idRoom,\n      idPlayer: socketRef.current.id\n    };\n    socketRef.current.emit(\"add point\", addPointObj);\n    console.log(words);\n\n    if (words.length === 0) {\n      nextRound();\n    }\n  };\n\n  const nextRound = () => {\n    setDisplayNextRound(true);\n\n    if (yourPlayingRef.current === true) {\n      let updatedWordsObj = {\n        idRoom,\n        words\n      };\n      socketRef.current.emit(\"update words\", updatedWordsObj);\n    }\n\n    socketRef.current.emit(\"next round\", idRoom);\n  };\n\n  const passRandomWord = () => {\n    let randomNumber = getRandomInteger(0, words.length - 1);\n\n    do {\n      randomNumber = getRandomInteger(0, words.length - 1);\n    } while (words[randomNumber] === actualWord);\n\n    words.forEach((word, index) => {\n      if (randomNumber === index) {\n        setActualWord(word);\n      }\n    });\n  };\n\n  const endTurn = () => {\n    if (yourPlayingRef.current === true) {\n      let updatedWordsObj = {\n        idRoom,\n        words\n      };\n      socketRef.current.emit(\"update words\", updatedWordsObj);\n    }\n\n    setDisplayEndTurn(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: displayNextRound ? /*#__PURE__*/_jsxDEV(NextRound, {\n      socketRef: socketRef,\n      idRoom: idRoom,\n      playerName: actualPlayer,\n      team: actualTeam,\n      points: actualPoints\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: displayEndTurn ? /*#__PURE__*/_jsxDEV(NextTurn, {\n        socketRef: socketRef,\n        idRoom: idRoom,\n        playerName: actualPlayer,\n        team: actualTeam,\n        points: actualPoints\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row justify-content-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Phase \", round + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [time < 1 ? endTurn() : '', \"Time: \", time]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 29\n        }, this), yourPlayingRef.current === true ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => passRandomWord(),\n            className: \"btn btn-primary col-md-2\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-times\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-light col-md-2\",\n            children: actualWord\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => goodRandomWord(actualWord),\n            className: \"btn btn-primary col-md-2\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-check\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Points: \", actualPoints]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 35\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-light\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [actualPlayer, \" de la team \", actualTeam, \" a rapport\\xE9 \", actualPoints, \" points\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 19\n    }, this)\n  }, void 0, false);\n};\n\n_s(Game1, \"a7ML0/JBu+pFJOiUWf5OXPKbJt4=\");\n\n_c = Game1;\nexport default Game1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game1\");","map":{"version":3,"sources":["/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Game1.tsx"],"names":["React","useState","useEffect","useRef","NextRound","NextTurn","Game1","idRoom","socketRef","yourPlayingRef","thisRound","displayEndTurn","setDisplayEndTurn","displayNextRound","setDisplayNextRound","round","setRound","words","setWords","actualWord","setActualWord","actualRound","setActualRound","actualPoints","setActualPoints","actualTeam","setActualTeam","actualPlayer","setActualPlayer","time","setTime","getRandomInteger","min","max","Math","floor","random","current","emit","on","rulesData","randomNumber","round1","length","round2","round3","console","log","forEach","word","index","points","teams","team","playing","name","players","player","id","pseudo","displayBool","setInterval","goodRandomWord","theWord","splice","addPointObj","idPlayer","nextRound","updatedWordsObj","passRandomWord","endTurn"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport { ListFormat } from 'typescript'\nimport { AdminObj, RulesObj, TeamObj, WordsObj } from '../Types'\nimport NextRound from './NextRound'\nimport NextTurn from './NextTurn'\n\ntype Props = {\n    idRoom: string | number\n    socketRef: React.MutableRefObject<any>\n}\n\nconst Game1: React.FC<Props>  = ({ idRoom, socketRef }) => {\n\n    const yourPlayingRef: React.MutableRefObject<boolean | undefined> = useRef(false)\n    const thisRound: React.MutableRefObject<number> = useRef(0)\n\n    const [displayEndTurn, setDisplayEndTurn] = useState<boolean>(false);\n    const [displayNextRound, setDisplayNextRound] = useState<boolean>(false);\n\n    const [round, setRound] = useState<number>(0);\n\n    const [words, setWords] = useState<string []>([]);\n    const [actualWord, setActualWord] = useState<string>();\n    const [actualRound, setActualRound] = useState<number>();\n    const [actualPoints, setActualPoints] = useState<number>(0);\n\n    const [actualTeam, setActualTeam] = useState<string>()\n    const [actualPlayer, setActualPlayer] = useState<string | null | undefined>()\n\n    const [time, setTime] = useState<number>(1)\n\n    const getRandomInteger = (min: number, max: number) => {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    useEffect(() => {\n        // socketRef.current.emit(\"ask rules\", idRoom)\n        // socketRef.current.on(\"rules\", (rulesData: RulesObj) => {\n        //     setActualRound(rulesData.round)\n        // }) // Surement Ã  modifier\n\n        socketRef.current.emit(\"ask rules\", idRoom)\n\n        socketRef.current.on(\"rules\", (rulesData: RulesObj) => {\n            setTime(rulesData.time)\n\n            setRound(rulesData.round)\n\n            thisRound.current = rulesData.round;\n\n            // setTimeout(() => {\n            //     clearInterval(interval)\n            // }, rulesData.time*1500)\n        })\n\n        socketRef.current.emit(\"ask words\", idRoom);\n        socketRef.current.on(\"words\", (words: WordsObj) => {\n\n            let randomNumber: number;\n\n            if (thisRound.current === 0) {\n                randomNumber = getRandomInteger(0, words.round1.length - 1)\n            } else if (thisRound.current === 1) {\n                randomNumber = getRandomInteger(0, words.round2.length - 1)\n            } else {\n                randomNumber = getRandomInteger(0, words.round3.length - 1)\n            }\n            \n\n            console.log(words);\n            console.log(round);\n            \n\n            \n\n            if (thisRound.current === 0) {\n                words.round1.forEach((word, index) => {\n                    if (randomNumber === index) {\n                        setActualWord(word)\n                    }\n                })\n                setWords(words.round1);\n            } else if (thisRound.current === 1) {\n                words.round2.forEach((word, index) => {\n                    if (randomNumber === index) {\n                        setActualWord(word)\n                    }\n                })\n                setWords(words.round2);\n            } else {\n                words.round3.forEach((word, index) => {\n                    if (randomNumber === index) {\n                        setActualWord(word)\n                    }\n                })\n                setWords(words.round3);\n            }\n        });\n\n        socketRef.current.on(\"points\", (points: number) => {\n            setActualPoints(points);\n        });\n\n        socketRef.current.emit(\"ask teams\", idRoom);\n        socketRef.current.on(\"teams\", (teams: TeamObj []) => {            \n            teams.forEach((team) => {\n                if (team.playing === true) {                    \n                    setActualTeam(team.name)\n                    team.players.forEach((player) => {\n                        if (player.playing === true) {\n                            if (player.id === socketRef.current.id) {                    \n                                yourPlayingRef.current = true\n                            }  \n                            setActualPlayer(player.pseudo)\n                        }\n                    })\n                }\n            })\n        });\n\n        socketRef.current.on(\"display next round\", (displayBool: boolean) => {\n            setDisplayNextRound(displayBool);\n        })\n\n        setInterval(() => {\n            setTime(time => time - 1)   \n        }, 1000)\n    }, [])\n\n    const goodRandomWord = (theWord: string) => {        \n        let randomNumber = getRandomInteger(0, words.length - 1)\n\n        words.forEach((word, index) => {\n            if (randomNumber === index) {\n                setActualWord(word)\n                words.splice(index, 1)                    \n            }\n        })        \n\n        let addPointObj = {\n            idRoom,\n            idPlayer: socketRef.current.id\n        }\n\n        socketRef.current.emit(\"add point\", addPointObj);\n        \n        console.log(words);\n\n        if (words.length === 0) {\n            nextRound();\n        }\n\n        \n    }\n\n    const nextRound = () => {\n        setDisplayNextRound(true)\n\n        if (yourPlayingRef.current === true) {\n            let updatedWordsObj= {\n                idRoom,\n                words\n            }\n            \n            socketRef.current.emit(\"update words\", updatedWordsObj);\n        }\n\n        socketRef.current.emit(\"next round\", idRoom);\n    }\n\n    const passRandomWord = () => {\n        let randomNumber = getRandomInteger(0, words.length - 1)\n        \n        do {\n            randomNumber = getRandomInteger(0, words.length - 1)\n        } while (words[randomNumber] === actualWord);\n\n        words.forEach((word, index) => {\n            if (randomNumber === index) {\n                setActualWord(word)\n            }\n        })\n    }\n\n    const endTurn = () => {\n        if (yourPlayingRef.current === true) {\n            let updatedWordsObj= {\n                idRoom,\n                words\n            }\n            \n            socketRef.current.emit(\"update words\", updatedWordsObj);\n        }\n        \n        setDisplayEndTurn(true)\n    }\n\n    return (\n        <>\n            { displayNextRound\n                ? <NextRound socketRef={socketRef} idRoom={idRoom} playerName={actualPlayer} team={actualTeam} points={actualPoints} />\n\n                : <div>\n                    { displayEndTurn\n                        ? <NextTurn socketRef={socketRef} idRoom={idRoom} playerName={actualPlayer} team={actualTeam} points={actualPoints} />\n\n                        : <div className=\"row justify-content-center\">          \n                            {/* <Chrono socketRef={socketRef} idRoom={idRoom} setDisplayEndTurn={setDisplayEndTurn} /> */}\n                                <h2>Phase { round + 1 }</h2>\n                            <div>\n                                { time < 1\n                                    ? endTurn()\n\n                                    :''\n                                }\n                                Time: {time}\n                            </div>                        \n                \n                            { yourPlayingRef.current === true\n                                ? <div>\n                                    <button onClick={() => passRandomWord()} className=\"btn btn-primary col-md-2\">\n                                    <i className=\"fas fa-times\"></i>\n                                    </button>\n                                    <p className=\"text-light col-md-2\">{actualWord}</p>\n                                    <button onClick={() => goodRandomWord(actualWord)} className=\"btn btn-primary col-md-2\">\n                                        <i className=\"fas fa-check\"></i>\n                                    </button>\n                                    <p>Points: {actualPoints}</p>\n                                </div> \n                \n                                : <div className=\"text-light\">\n                                    <p>{actualPlayer} de la team {actualTeam} a rapportÃ© {actualPoints} points</p>\n                                </div>  \n                            }                                                \n                        </div>\n                    }\n                 </div>                         \n            }\n            \n        </>\n        \n    )\n}\n\nexport default Game1\n"]},"metadata":{},"sourceType":"module"}