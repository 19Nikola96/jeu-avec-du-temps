{"ast":null,"code":"var _jsxFileName = \"/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Game1.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport NextRound from './NextRound';\nimport NextTurn from './NextTurn';\nimport './Style/timer.css';\nimport './Style/board.css';\nimport Board from './Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Game1 = ({\n  idRoom,\n  socketRef\n}) => {\n  _s();\n\n  const yourPlayingRef = useRef(false);\n  const thisRound = useRef(0);\n  const [displayEndTurn, setDisplayEndTurn] = useState(false);\n  const [displayNextRound, setDisplayNextRound] = useState(false);\n  const [round, setRound] = useState(0);\n  const [words, setWords] = useState([]);\n  const [actualWord, setActualWord] = useState();\n  const [actualRound, setActualRound] = useState();\n  const [actualPoints, setActualPoints] = useState(0);\n  const [actualTeam, setActualTeam] = useState();\n  const [actualPlayer, setActualPlayer] = useState();\n  const [time, setTime] = useState(1);\n  const [forAnimationTime, setForAnimationTime] = useState(100);\n\n  const getRandomInteger = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  useEffect(() => {\n    // socketRef.current.emit(\"ask rules\", idRoom)\n    // socketRef.current.on(\"rules\", (rulesData: RulesObj) => {\n    //     setActualRound(rulesData.round)\n    // }) // Surement Ã  modifier\n    socketRef.current.emit(\"ask rules\", idRoom);\n    socketRef.current.on(\"rules\", rulesData => {\n      if (rulesData.round === 2) {\n        setTime(rulesData.timeDraw);\n        setForAnimationTime(rulesData.timeDraw);\n      } else {\n        setTime(rulesData.time);\n        setForAnimationTime(rulesData.time);\n      }\n\n      setRound(rulesData.round);\n      thisRound.current = rulesData.round; // setTimeout(() => {\n      //     clearInterval(interval)\n      // }, rulesData.time*1500)            \n    });\n    socketRef.current.emit(\"ask words\", idRoom);\n    socketRef.current.on(\"words\", words => {\n      let randomNumber;\n\n      if (thisRound.current === 0) {\n        randomNumber = getRandomInteger(0, words.round1.length - 1);\n      } else if (thisRound.current === 1) {\n        randomNumber = getRandomInteger(0, words.round2.length - 1);\n      } else {\n        randomNumber = getRandomInteger(0, words.round3.length - 1);\n      }\n\n      if (thisRound.current === 0) {\n        words.round1.forEach((word, index) => {\n          if (randomNumber === index) {\n            setActualWord(word);\n          }\n        });\n        setWords(words.round1);\n      } else if (thisRound.current === 1) {\n        words.round2.forEach((word, index) => {\n          if (randomNumber === index) {\n            setActualWord(word);\n          }\n        });\n        setWords(words.round2);\n      } else {\n        words.round3.forEach((word, index) => {\n          if (randomNumber === index) {\n            setActualWord(word);\n          }\n        });\n        setWords(words.round3);\n      }\n    });\n    socketRef.current.on(\"points\", points => {\n      setActualPoints(points);\n    });\n    socketRef.current.emit(\"ask teams\", idRoom);\n    socketRef.current.on(\"teams\", teams => {\n      teams.forEach(team => {\n        if (team.playing === true) {\n          setActualTeam(team.name);\n          team.players.forEach(player => {\n            if (player.playing === true) {\n              if (player.id === socketRef.current.id) {\n                yourPlayingRef.current = true;\n              }\n\n              setActualPlayer(player.pseudo);\n            }\n          });\n        }\n      });\n    });\n    socketRef.current.on(\"display next round\", displayBool => {\n      setDisplayNextRound(displayBool);\n    });\n    setInterval(() => {\n      setTime(time => time - 1);\n    }, 1000);\n  }, []);\n\n  const goodRandomWord = () => {\n    words.forEach((word, index) => {\n      if (actualWord === word) {\n        words.splice(index, 1);\n      }\n    });\n    let randomNumber = getRandomInteger(0, words.length - 1);\n    words.forEach((word, index) => {\n      if (randomNumber === index) {\n        setActualWord(word);\n      }\n    });\n    let addPointObj = {\n      idRoom,\n      idPlayer: socketRef.current.id\n    };\n    socketRef.current.emit(\"add point\", addPointObj);\n\n    if (words.length === 0) {\n      nextRound();\n    }\n\n    if (thisRound.current === 2) {\n      let canvas = document.getElementById('board');\n      let ctx = canvas.getContext('2d');\n      let sketch = document.querySelector('#sketch');\n      let sketch_style = getComputedStyle(sketch);\n      canvas.width = parseInt(sketch_style.getPropertyValue('width'));\n      canvas.height = parseInt(sketch_style.getPropertyValue('height'));\n      ctx.clearRect(0, 0, 0, 0);\n      canvas.height = 400;\n      socketRef.current.emit(\"erase board\", true);\n    }\n  };\n\n  const nextRound = () => {\n    setDisplayNextRound(true);\n\n    if (yourPlayingRef.current === true) {\n      let updatedWordsObj = {\n        idRoom,\n        words\n      };\n      socketRef.current.emit(\"update words\", updatedWordsObj);\n    }\n\n    socketRef.current.emit(\"next round\", idRoom);\n  };\n\n  const passRandomWord = () => {\n    let randomNumber = getRandomInteger(0, words.length - 1);\n\n    do {\n      randomNumber = getRandomInteger(0, words.length - 1);\n    } while (words[randomNumber] === actualWord);\n\n    words.forEach((word, index) => {\n      if (randomNumber === index) {\n        setActualWord(word);\n      }\n    });\n\n    if (thisRound.current === 2) {\n      let canvas = document.getElementById('board');\n      let ctx = canvas.getContext('2d');\n      let sketch = document.querySelector('#sketch');\n      let sketch_style = getComputedStyle(sketch);\n      canvas.width = parseInt(sketch_style.getPropertyValue('width'));\n      canvas.height = parseInt(sketch_style.getPropertyValue('height'));\n      ctx.clearRect(0, 0, 0, 0);\n      canvas.height = 400;\n      socketRef.current.emit(\"erase board\", true);\n    }\n  };\n\n  const endTurn = () => {\n    if (yourPlayingRef.current === true) {\n      let updatedWordsObj = {\n        idRoom,\n        words\n      };\n      socketRef.current.emit(\"update words\", updatedWordsObj);\n    }\n\n    setDisplayEndTurn(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: displayNextRound ? /*#__PURE__*/_jsxDEV(NextRound, {\n      socketRef: socketRef,\n      idRoom: idRoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: displayEndTurn ? /*#__PURE__*/_jsxDEV(NextTurn, {\n        socketRef: socketRef,\n        idRoom: idRoom,\n        playerName: actualPlayer,\n        team: actualTeam,\n        points: actualPoints\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row justify-content-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Phase \", round + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          id: \"chrono-box\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chrono\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"skill\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"outer\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"inner\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"timer-number\",\n                    children: [time < 1 ? endTurn() : '', time]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 257,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n              width: \"160px\",\n              height: \"160px\",\n              children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n                children: /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n                  id: \"GradientColor\",\n                  children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n                    offset: \"0%\",\n                    stopColor: \"#e91e63\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 273,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n                    offset: \"100%\",\n                    stopColor: \"#673ab7\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 274,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n                cx: \"80\",\n                cy: \"80\",\n                r: \"70\",\n                strokeLinecap: \"round\",\n                style: {\n                  animation: `timer ${forAnimationTime}s linear infinite`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 29\n        }, this), thisRound.current === 0 || thisRound.current === 1 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: yourPlayingRef.current === true ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => passRandomWord(),\n              className: \"btn btn-primary col-md-2\",\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-times\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-light col-md-2\",\n              children: actualWord\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => goodRandomWord(),\n              className: \"btn btn-primary col-md-2\",\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-check\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Points: \", actualPoints]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 43\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-light\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [actualPlayer, \" de la team \", actualTeam, \" a rapport\\xE9 \", actualPoints, \" points\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 45\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 43\n          }, this)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: yourPlayingRef.current === true ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Board, {\n              socketRef: socketRef,\n              idRoom: idRoom,\n              imPlaying: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => passRandomWord(),\n              className: \"btn btn-primary col-md-2\",\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-times\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-light col-md-2\",\n              children: actualWord\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => goodRandomWord(),\n              className: \"btn btn-primary col-md-2\",\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-check\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Points: \", actualPoints]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 43\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-light\",\n            children: [/*#__PURE__*/_jsxDEV(Board, {\n              socketRef: socketRef,\n              idRoom: idRoom,\n              imPlaying: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [actualPlayer, \" de la team \", actualTeam, \" a rapport\\xE9 \", actualPoints, \" points\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 43\n          }, this)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 19\n    }, this)\n  }, void 0, false);\n};\n\n_s(Game1, \"F55BqVe1Ny2KFfoL2FMukbkdg/Y=\");\n\n_c = Game1;\nexport default Game1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game1\");","map":{"version":3,"sources":["/Users/nikolamorice-gallier/Desktop/Work/online-timesup/client/src/Components/Game1.tsx"],"names":["React","useState","useEffect","useRef","NextRound","NextTurn","Board","Game1","idRoom","socketRef","yourPlayingRef","thisRound","displayEndTurn","setDisplayEndTurn","displayNextRound","setDisplayNextRound","round","setRound","words","setWords","actualWord","setActualWord","actualRound","setActualRound","actualPoints","setActualPoints","actualTeam","setActualTeam","actualPlayer","setActualPlayer","time","setTime","forAnimationTime","setForAnimationTime","getRandomInteger","min","max","Math","floor","random","current","emit","on","rulesData","timeDraw","randomNumber","round1","length","round2","round3","forEach","word","index","points","teams","team","playing","name","players","player","id","pseudo","displayBool","setInterval","goodRandomWord","splice","addPointObj","idPlayer","nextRound","canvas","document","getElementById","ctx","getContext","sketch","querySelector","sketch_style","getComputedStyle","width","parseInt","getPropertyValue","height","clearRect","updatedWordsObj","passRandomWord","endTurn","animation"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport { ListFormat } from 'typescript'\nimport { AdminObj, RulesObj, TeamObj, WordsObj } from '../Types'\nimport NextRound from './NextRound'\nimport NextTurn from './NextTurn'\n\nimport './Style/timer.css';\nimport './Style/board.css';\nimport Board from './Board'\n\ntype Props = {\n    idRoom: string | number\n    socketRef: React.MutableRefObject<any>\n}\n\nconst Game1: React.FC<Props>  = ({ idRoom, socketRef }) => {\n\n    const yourPlayingRef: React.MutableRefObject<boolean | undefined> = useRef(false)\n    const thisRound: React.MutableRefObject<number> = useRef(0)\n\n    const [displayEndTurn, setDisplayEndTurn] = useState<boolean>(false);\n    const [displayNextRound, setDisplayNextRound] = useState<boolean>(false);\n\n    const [round, setRound] = useState<number>(0);\n\n    const [words, setWords] = useState<string []>([]);\n    const [actualWord, setActualWord] = useState<string>();\n    const [actualRound, setActualRound] = useState<number>();\n    const [actualPoints, setActualPoints] = useState<number>(0);\n\n    const [actualTeam, setActualTeam] = useState<string>()\n    const [actualPlayer, setActualPlayer] = useState<string | null | undefined>()\n\n    const [time, setTime] = useState<number>(1)\n    const [forAnimationTime, setForAnimationTime] = useState<number>(100)\n\n    const getRandomInteger = (min: number, max: number) => {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    useEffect(() => {\n        \n        // socketRef.current.emit(\"ask rules\", idRoom)\n        // socketRef.current.on(\"rules\", (rulesData: RulesObj) => {\n        //     setActualRound(rulesData.round)\n        // }) // Surement Ã  modifier\n\n        socketRef.current.emit(\"ask rules\", idRoom)\n\n        socketRef.current.on(\"rules\", (rulesData: RulesObj) => {   \n            \n            if (rulesData.round === 2) {\n                setTime(rulesData.timeDraw)\n                setForAnimationTime(rulesData.timeDraw)\n            } else {\n                setTime(rulesData.time)\n                setForAnimationTime(rulesData.time)\n            }\n\n            setRound(rulesData.round)\n\n            thisRound.current = rulesData.round; \n\n            // setTimeout(() => {\n            //     clearInterval(interval)\n            // }, rulesData.time*1500)            \n        })\n\n        socketRef.current.emit(\"ask words\", idRoom);\n        socketRef.current.on(\"words\", (words: WordsObj) => {\n\n            let randomNumber: number;\n\n            if (thisRound.current === 0) {\n                randomNumber = getRandomInteger(0, words.round1.length - 1)\n            } else if (thisRound.current === 1) {\n                randomNumber = getRandomInteger(0, words.round2.length - 1)\n            } else {\n                randomNumber = getRandomInteger(0, words.round3.length - 1)\n            }\n                        \n            if (thisRound.current === 0) {\n                words.round1.forEach((word, index) => {\n                    if (randomNumber === index) {\n                        setActualWord(word)\n                    }\n                })\n                setWords(words.round1);\n            } else if (thisRound.current === 1) {\n                words.round2.forEach((word, index) => {\n                    if (randomNumber === index) {\n                        setActualWord(word)\n                    }\n                })\n                setWords(words.round2);\n            } else {\n                words.round3.forEach((word, index) => {\n                    if (randomNumber === index) {\n                        setActualWord(word)\n                    }\n                })\n                setWords(words.round3);\n            }\n        });\n\n        socketRef.current.on(\"points\", (points: number) => {\n            setActualPoints(points);\n        });\n\n        socketRef.current.emit(\"ask teams\", idRoom);\n        socketRef.current.on(\"teams\", (teams: TeamObj []) => {            \n            teams.forEach((team) => {\n                if (team.playing === true) {                    \n                    setActualTeam(team.name)\n                    team.players.forEach((player) => {\n                        if (player.playing === true) {\n                            if (player.id === socketRef.current.id) {                    \n                                yourPlayingRef.current = true\n                            }  \n                            setActualPlayer(player.pseudo)\n                        }\n                    })\n                }\n            })\n        });\n\n        socketRef.current.on(\"display next round\", (displayBool: boolean) => {\n            setDisplayNextRound(displayBool);\n        })    \n\n        setInterval(() => {\n            setTime(time => time - 1)   \n        }, 1000)\n        \n    }, [])\n\n    const goodRandomWord = () => {        \n        \n        words.forEach((word, index) => {\n            if (actualWord === word) {\n                words.splice(index, 1)                  \n            }\n        })\n        \n        let randomNumber = getRandomInteger(0, words.length - 1)\n\n        words.forEach((word, index) => {\n            if (randomNumber === index) {\n                setActualWord(word)\n            }\n        })        \n\n        let addPointObj = {\n            idRoom,\n            idPlayer: socketRef.current.id\n        }        \n\n        socketRef.current.emit(\"add point\", addPointObj);\n        \n        if (words.length === 0) {\n            nextRound();\n        }\n\n        if (thisRound.current === 2) {\n            let canvas = document.getElementById('board') as HTMLCanvasElement;        \n\n            let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n        \n            let sketch = document.querySelector('#sketch') as HTMLDivElement;\n            let sketch_style = getComputedStyle(sketch);\n            canvas.width = parseInt(sketch_style.getPropertyValue('width'));\n            canvas.height = parseInt(sketch_style.getPropertyValue('height'));\n\n            ctx.clearRect(0, 0, 0, 0)\n\n            canvas.height = 400\n\n            socketRef.current.emit(\"erase board\", true);\n        }\n        \n    }\n\n    const nextRound = () => {\n        setDisplayNextRound(true)\n\n        if (yourPlayingRef.current === true) {\n            let updatedWordsObj= {\n                idRoom,\n                words\n            }\n            \n            socketRef.current.emit(\"update words\", updatedWordsObj);\n        }\n\n        socketRef.current.emit(\"next round\", idRoom);\n    }\n\n    const passRandomWord = () => {\n        let randomNumber = getRandomInteger(0, words.length - 1)\n        \n        do {\n            randomNumber = getRandomInteger(0, words.length - 1)\n        } while (words[randomNumber] === actualWord);\n\n        words.forEach((word, index) => {\n            if (randomNumber === index) {\n                setActualWord(word)\n            }\n        })\n\n        if (thisRound.current === 2) {            \n            let canvas = document.getElementById('board') as HTMLCanvasElement;        \n\n            let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n        \n            let sketch = document.querySelector('#sketch') as HTMLDivElement;\n            let sketch_style = getComputedStyle(sketch);\n            canvas.width = parseInt(sketch_style.getPropertyValue('width'));\n            canvas.height = parseInt(sketch_style.getPropertyValue('height'));\n\n            ctx.clearRect(0, 0, 0, 0)\n\n            canvas.height = 400\n            socketRef.current.emit(\"erase board\", true);\n        }\n    }\n\n    const endTurn = () => {\n        if (yourPlayingRef.current === true) {\n            let updatedWordsObj= {\n                idRoom,\n                words\n            }\n            \n            socketRef.current.emit(\"update words\", updatedWordsObj);\n        }\n        \n        setDisplayEndTurn(true)\n    }     \n\n    return (\n        <> \n            { displayNextRound\n                ? <NextRound socketRef={socketRef} idRoom={idRoom} />\n\n                : <div>\n                    { displayEndTurn\n                        ? <NextTurn socketRef={socketRef} idRoom={idRoom} playerName={actualPlayer} team={actualTeam} points={actualPoints} />\n\n                        : <div className=\"row justify-content-center\">          \n                            {/* <Chrono socketRef={socketRef} idRoom={idRoom} setDisplayEndTurn={setDisplayEndTurn} /> */}\n                            <h2>Phase { round + 1 }</h2>\n                            <section id=\"chrono-box\">\n                                <div className=\"chrono\">\n                                    <div className=\"skill\">\n                                        <div className=\"outer\">\n                                            <div className=\"inner\">\n                                            <div className=\"timer-number\">\n                                                { time < 1\n                                                    ? endTurn()\n\n                                                    :''\n                                                }\n                                                {time}                                                       \n                                            </div>\n                                            </div>\n                                        </div>          \n                                    </div> \n\n                                    <svg width=\"160px\" height=\"160px\">\n                                    <defs>\n                                        <linearGradient id=\"GradientColor\">\n                                            <stop offset=\"0%\" stopColor=\"#e91e63\" />\n                                            <stop offset=\"100%\" stopColor=\"#673ab7\" />\n                                        </linearGradient>\n                                    </defs>\n                                    <circle cx=\"80\" cy=\"80\" r=\"70\" strokeLinecap=\"round\" style={{ animation: `timer ${forAnimationTime}s linear infinite`}} />\n                                    </svg>\n                                </div>                           \n                            </section>\n\n                            { thisRound.current === 0 || thisRound.current === 1\n                                ? <>\n                                    { yourPlayingRef.current === true\n                                        ? <div>\n                                            <button onClick={() => passRandomWord()} className=\"btn btn-primary col-md-2\">\n                                            <i className=\"fas fa-times\"></i>\n                                            </button>\n                                            <p className=\"text-light col-md-2\">{actualWord}</p>\n                                            <button onClick={() => goodRandomWord()} className=\"btn btn-primary col-md-2\">\n                                                <i className=\"fas fa-check\"></i>\n                                            </button>\n                                            <p>Points: {actualPoints}</p>\n                                        </div> \n                        \n                                        : <div className=\"text-light\">\n                                            <p>{actualPlayer} de la team {actualTeam} a rapportÃ© {actualPoints} points</p>\n                                        </div>  \n                                    }   \n                                  </>\n\n                                : <>\n                                    { yourPlayingRef.current === true\n                                        ? <div>                                             \n                                            <Board socketRef={socketRef} idRoom={idRoom} imPlaying={true} />\n                                            \n                                            <button onClick={() => passRandomWord()} className=\"btn btn-primary col-md-2\">\n                                            <i className=\"fas fa-times\"></i>\n                                            </button>\n                                            <p className=\"text-light col-md-2\">{actualWord}</p>\n                                            <button onClick={() => goodRandomWord()} className=\"btn btn-primary col-md-2\">\n                                                <i className=\"fas fa-check\"></i>\n                                            </button>\n                                            <p>Points: {actualPoints}</p>\n                                        </div> \n                        \n                                        : <div className=\"text-light\">\n                                            <Board socketRef={socketRef} idRoom={idRoom} imPlaying={false} />\n                                            <p>{actualPlayer} de la team {actualTeam} a rapportÃ© {actualPoints} points</p>\n                                        </div>  \n                                    }\n                                  </>\n                            }                  \n                \n                                                                         \n                        </div>\n                    }\n                 </div>                         \n            }\n            \n        </>\n        \n    )\n}\n\nexport default Game1\n"]},"metadata":{},"sourceType":"module"}